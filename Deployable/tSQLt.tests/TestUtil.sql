/*
   Copyright 2011 tSQLt

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
DECLARE @Msg VARCHAR(MAX);SELECT @Msg = 'Compiled at '+CONVERT(VARCHAR,GETDATE(),121);RAISERROR(@Msg,0,1);
GO
IF OBJECT_ID('tSQLt_testutil.Private_Drop_tSQLtTestUtilCLR_objects') IS NOT NULL EXEC('EXEC tSQLt_testutil.Private_Drop_tSQLtTestUtilCLR_objects');
GO
EXEC tSQLt.DropClass tSQLt_testutil;
GO

CREATE SCHEMA tSQLt_testutil;
GO
CREATE PROC tSQLt_testutil.ReThrow @msg NVARCHAR(MAX) = '' AS SET @msg = @msg + '[Msg '+LTRIM(STR(ERROR_NUMBER()))+', Level '+LTRIM(STR(ERROR_SEVERITY()))+', State '+LTRIM(STR(ERROR_STATE()))+ISNULL(', Procedure '+ERROR_PROCEDURE(),'')+', Line '+LTRIM(STR(ERROR_LINE()))+']'+ERROR_MESSAGE();RAISERROR(@msg,16,10);
GO
CREATE PROC tSQLt_testutil.assertFailCalled
    @Command NVARCHAR(MAX),
    @Message VARCHAR(MAX) = NULL
AS
BEGIN
    IF(@Message IS NULL)
    BEGIN
      SET @Message = 'Fail not called when executing <' + @Command + '>';
    END
    DECLARE @CallCount INT;
    DECLARE @Error NVARCHAR(MAX);SET @Error = '';
    BEGIN TRAN;
    DECLARE @TranName CHAR(32); EXEC tSQLt.GetNewTranName @TranName OUT;
    SAVE TRAN @TranName;
      EXEC tSQLt.SpyProcedure 'tSQLt.Fail','RAISERROR(''tSQLt_testutil.assertFailCalled.INTERNAL'',16,10);';
      BEGIN TRY
        EXEC (@Command);
      END TRY
      BEGIN CATCH
        IF(ERROR_MESSAGE() NOT LIKE '%tSQLt_testutil.assertFailCalled.INTERNAL%')
        BEGIN
          ROLLBACK TRAN @TranName;
          COMMIT;
          EXEC tSQLt_testutil.ReThrow;
        END
      END CATCH;
      SELECT @CallCount = COUNT(1) FROM tSQLt.Fail_SpyProcedureLog;
    ROLLBACK TRAN @TranName;
    COMMIT TRAN;

    IF (@CallCount = 0)
    BEGIN
      EXEC tSQLt.Fail @Message,@Error;
    END;
END;
GO

CREATE PROCEDURE tSQLt_testutil.CaptureFailMessage
  @Command NVARCHAR(MAX),
  @FailMessage NVARCHAR(MAX) OUTPUT
AS
BEGIN
  BEGIN TRAN;
  DECLARE @TranName CHAR(32); EXEC tSQLt.GetNewTranName @TranName OUT;
  SAVE TRAN @TranName;
    EXEC tSQLt.SpyProcedure 'tSQLt.Fail','RAISERROR(''tSQLt_testutil.assertFailCalled.INTERNAL'',16,10);';
    BEGIN TRY
      EXEC (@Command);
    END TRY
    BEGIN CATCH
        IF(ERROR_MESSAGE() NOT LIKE '%tSQLt_testutil.assertFailCalled.INTERNAL%')
      BEGIN
        ROLLBACK TRAN @TranName;
        COMMIT;
        EXEC tSQLt_testutil.ReThrow;
      END
    END CATCH;
    SELECT @FailMessage = 
        COALESCE(Message0, '')--should be '!NULL!' but default parameters are not currently supported by SpyProcedure
      + COALESCE(Message1, '')
      + COALESCE(Message2, '')
      + COALESCE(Message3, '')
      + COALESCE(Message4, '')
      + COALESCE(Message5, '')
      + COALESCE(Message6, '')
      + COALESCE(Message7, '')
      + COALESCE(Message8, '')
      + COALESCE(Message9, '') FROM tSQLt.Fail_SpyProcedureLog;
  ROLLBACK TRAN @TranName;
  COMMIT TRAN;
END
GO

CREATE PROC tSQLt_testutil.AssertFailMessageEquals
    @Command NVARCHAR(MAX),
    @ExpectedMessage NVARCHAR(MAX),
    @Message0 VARCHAR(MAX) = NULL,
    @Message1 VARCHAR(MAX) = NULL,
    @Message2 VARCHAR(MAX) = NULL,
    @Message3 VARCHAR(MAX) = NULL,
    @Message4 VARCHAR(MAX) = NULL
AS
BEGIN
    DECLARE @Message VARCHAR(MAX);
    SELECT  @Message = 
        COALESCE(@Message0, '')
      + COALESCE(@Message1, '')
      + COALESCE(@Message2, '')
      + COALESCE(@Message3, '')
      + COALESCE(@Message4, '');

    DECLARE @ActualMessage NVARCHAR(MAX);

    EXEC tSQLt_testutil.CaptureFailMessage 
            @Command ,
            @ActualMessage OUTPUT;

    EXEC tSQLt.AssertEqualsString @ExpectedMessage, @ActualMessage, @Message;
END;
GO

CREATE PROC tSQLt_testutil.AssertFailMessageLike
    @Command NVARCHAR(MAX),
    @ExpectedMessage NVARCHAR(MAX),
    @Message0 VARCHAR(MAX) = NULL,
    @Message1 VARCHAR(MAX) = NULL,
    @Message2 VARCHAR(MAX) = NULL,
    @Message3 VARCHAR(MAX) = NULL,
    @Message4 VARCHAR(MAX) = NULL
AS
BEGIN
    DECLARE @Message VARCHAR(MAX);
    SELECT  @Message = 
        COALESCE(@Message0, '')
      + COALESCE(@Message1, '')
      + COALESCE(@Message2, '')
      + COALESCE(@Message3, '')
      + COALESCE(@Message4, '');

    DECLARE @ActualMessage NVARCHAR(MAX);

    EXEC tSQLt_testutil.CaptureFailMessage 
            @Command ,
            @ActualMessage OUTPUT;

    EXEC tSQLt.AssertLike @ExpectedMessage, @ActualMessage, @Message;
END;
GO

CREATE PROC tSQLt_testutil.RemoveTestClassPropertyFromAllExistingClasses
AS
BEGIN
  DECLARE @TestClassName NVARCHAR(MAX);
  DECLARE @TestProcName NVARCHAR(MAX);

  DECLARE tests CURSOR LOCAL FAST_FORWARD FOR
   SELECT DISTINCT s.name AS testClassName
     FROM sys.extended_properties ep
     JOIN sys.schemas s
       ON ep.major_id = s.schema_id
    WHERE ep.name = N'tSQLt.TestClass';

  OPEN tests;
  
  FETCH NEXT FROM tests INTO @TestClassName;
  WHILE @@FETCH_STATUS = 0
  BEGIN
    EXEC sp_dropextendedproperty @name = 'tSQLt.TestClass',
                                 @level0type = 'SCHEMA',
                                 @level0name = @TestClassName;
    
    FETCH NEXT FROM tests INTO @TestClassName;
  END;
  
  CLOSE tests;
  DEALLOCATE tests;
END;
GO
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 

CREATE PROCEDURE tSQLt_testutil.CaptureTestResult
  @TestName NVARCHAR(MAX),
  @Result NVARCHAR(MAX) OUTPUT,   
  @Msg NVARCHAR(MAX) OUTPUT    
AS
BEGIN
  DECLARE @Cmd NVARCHAR(MAX);    
  SELECT @Cmd = 'EXEC tSQLt.Private_RunTest '+
                QUOTENAME(
                   QUOTENAME(OBJECT_SCHEMA_NAME(OBJECT_ID(@TestName)))+'.'+
                   QUOTENAME(OBJECT_NAME(OBJECT_ID(@TestName))),'''')+';';
  BEGIN TRAN;
  DECLARE @TranName CHAR(32); EXEC tSQLt.GetNewTranName @TranName OUT;
  SAVE TRAN @TranName;
    TRUNCATE TABLE tSQLt.TestResult;
    EXEC tSQLt.SuppressOutput @Cmd
    SELECT @Result = Result, @Msg = Msg FROM tSQLt.TestResult;
  ROLLBACK TRAN @TranName;
  COMMIT TRAN;
END;
GO
CREATE PROCEDURE tSQLt_testutil.AssertTestFails
  @TestName NVARCHAR(MAX),
  @ExpectedMessage NVARCHAR(MAX) = NULL
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX);
    DECLARE @Msg NVARCHAR(MAX);
    
    EXEC tSQLt_testutil.CaptureTestResult @TestName, @Result OUTPUT, @Msg OUTPUT;
    
    IF(@Result <> 'Failure')
    BEGIN
      EXEC tSQLt.Fail 'Expected test to fail. Instead it resulted in ',@Result,'. The Message is: "',@Msg,'"';
    END
    
    IF(@ExpectedMessage IS NOT NULL)
    BEGIN
      EXEC tSQLt.AssertLike @ExpectedMessage,@Msg,'Incorrect Fail message used:';
    END
END;
GO
CREATE PROCEDURE tSQLt_testutil.AssertTestSucceeds
  @TestName NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX);
    DECLARE @Msg NVARCHAR(MAX);
    
    EXEC tSQLt_testutil.CaptureTestResult @TestName, @Result OUTPUT, @Msg OUTPUT;
    
    IF(@Result <> 'Success')
    BEGIN
      EXEC tSQLt.Fail 'Expected test to succeed. Instead it resulted in ',@Result,'. The Message is: "',@Msg,'"';
    END
END;
GO
CREATE PROCEDURE tSQLt_testutil.AssertTestErrors
  @TestName NVARCHAR(MAX),
  @ExpectedMessage NVARCHAR(MAX) = NULL
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX);
    DECLARE @Msg NVARCHAR(MAX);
    
    EXEC tSQLt_testutil.CaptureTestResult @TestName, @Result OUTPUT, @Msg OUTPUT;
    
    IF(@Result <> 'Error')
    BEGIN
      EXEC tSQLt.Fail 'Expected test to error. Instead it resulted in ',@Result,'. The Message is: "',@Msg,'"';
    END
    
    IF(@ExpectedMessage IS NOT NULL)
    BEGIN
      EXEC tSQLt.AssertLike @ExpectedMessage,@Msg,'Incorrect Error Message:';
    END
END;
GO
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 


GO

CREATE ASSEMBLY [tSQLtTestUtilCLR] AUTHORIZATION [dbo] FROM 


GO

CREATE FUNCTION tSQLt_testutil.GetUnsignedEmptyBytes()
RETURNS TABLE
AS
RETURN
  SELECT 0x4D5A90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A2400000000000000504500004C0103000736E6610000000000000000E00002210B010B000006000000060000000000002E250000002000000040000000000010002000000002000004000000000000000400000000000000008000000002000000000000030040850000100000100000000010000010000000000000100000000000000000000000E02400004B000000004000002803000000000000000000000000000000000000006000000C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000080000000000000000000000082000004800000000000000000000002E7465787400000034050000002000000006000000020000000000000000000000000000200000602E7273726300000028030000004000000004000000080000000000000000000000000000400000402E72656C6F6300000C0000000060000000020000000C00000000000000000000000000004000004200000000000000000000000000000000102500000000000048000000020005005020000090040000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042534A4201000100000000000C00000076322E302E35303732370000000005006C00000068010000237E0000D4010000F401000023537472696E677300000000C80300000800000023555300D0030000100000002347554944000000E0030000B000000023426C6F620000000000000002000001071400000900000000FA253300160000010000000E000000010000000E0000000C000000010000000100000000000A000100000000000600370025000600540025000600710025000600900025000600A90025000600C20025000600DD0025000600F800250006003001110106004401110106005201250006006B0125000600A80188010600C8018801000000000100000000000100010009004E000A0011004E000A0019004E000A0021004E000A0029004E000A0031004E000A0039004E000A0041004E000A0049004E000F0051004E000A0059004E000A0061004E000A0069004E00140071004E0019002E000B001D002E00130030002E001B0030002E00230030002E002B001D002E00330036002E003B0030002E004B0030002E0053004E002E00630078002E006B0085002E0073008E00048000000100000000000000000000000000E601000002000000000000000000000001001C00000000000000003C4D6F64756C653E00556E7369676E6564456D7074792E646C6C006D73636F726C69620053797374656D2E5265666C656374696F6E00417373656D626C795469746C65417474726962757465002E63746F7200417373656D626C794465736372697074696F6E41747472696275746500417373656D626C79436F6E66696775726174696F6E41747472696275746500417373656D626C79436F6D70616E7941747472696275746500417373656D626C7950726F6475637441747472696275746500417373656D626C79436F7079726967687441747472696275746500417373656D626C7954726164656D61726B41747472696275746500417373656D626C7943756C747572654174747269627574650053797374656D2E52756E74696D652E496E7465726F70536572766963657300436F6D56697369626C65417474726962757465004775696441747472696275746500417373656D626C7956657273696F6E41747472696275746500417373656D626C7946696C6556657273696F6E4174747269627574650053797374656D2E52756E74696D652E436F6D70696C6572536572766963657300436F6D70696C6174696F6E52656C61786174696F6E734174747269627574650052756E74696D65436F6D7061746962696C69747941747472696275746500556E7369676E6564456D7074790000032000000000003F49AC7F929A7A49B9D9E6A2398FC7590008B77A5C561934E089042001010E04200101020420010108032000011201000D556E7369676E6564456D707479000005010000000017010012436F7079726967687420C2A920203230313500002901002432313565313935372D353138392D343230392D613362302D36623235613435383837363200000C010007312E302E302E3000000801000800000000001E01000100540216577261704E6F6E457863657074696F6E5468726F7773010000000825000000000000000000001E250000002000000000000000000000000000000000000000000000102500000000000000005F436F72446C6C4D61696E006D73636F7265652E646C6C0000000000FF250020001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100100000001800008000000000000000000000000000000100010000003000008000000000000000000000000000000100000000004800000058400000D00200000000000000000000D00234000000560053005F00560045005200530049004F004E005F0049004E0046004F0000000000BD04EFFE00000100000001000000000000000100000000003F000000000000000400000002000000000000000000000000000000440000000100560061007200460069006C00650049006E0066006F00000000002400040000005400720061006E0073006C006100740069006F006E00000000000000B00430020000010053007400720069006E006700460069006C00650049006E0066006F0000000C020000010030003000300030003000340062003000000044000E000100460069006C0065004400650073006300720069007000740069006F006E000000000055006E007300690067006E006500640045006D007000740079000000300008000100460069006C006500560065007200730069006F006E000000000031002E0030002E0030002E003000000044001200010049006E007400650072006E0061006C004E0061006D006500000055006E007300690067006E006500640045006D007000740079002E0064006C006C0000004800120001004C006500670061006C0043006F007000790072006900670068007400000043006F0070007900720069006700680074002000A90020002000320030003100350000004C00120001004F0072006900670069006E0061006C00460069006C0065006E0061006D006500000055006E007300690067006E006500640045006D007000740079002E0064006C006C0000003C000E000100500072006F0064007500630074004E0061006D0065000000000055006E007300690067006E006500640045006D007000740079000000340008000100500072006F006400750063007400560065007200730069006F006E00000031002E0030002E0030002E003000000038000800010041007300730065006D0062006C0079002000560065007200730069006F006E00000031002E0030002E0030002E0030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000C000000303500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 AS UnsignedEmptyBytes;



GO

GO
CREATE PROCEDURE tSQLt_testutil.Private_Drop_tSQLtTestUtilCLR_objects
AS
BEGIN
  IF TYPE_ID('tSQLt_testutil.DataTypeNoEqual') IS NOT NULL DROP TYPE tSQLt_testutil.DataTypeNoEqual;
  IF TYPE_ID('tSQLt_testutil.DataTypeWithEqual') IS NOT NULL DROP TYPE tSQLt_testutil.DataTypeWithEqual;
  IF TYPE_ID('tSQLt_testutil.DataTypeByteOrdered') IS NOT NULL DROP TYPE tSQLt_testutil.DataTypeByteOrdered;
  IF OBJECT_ID('tSQLt_testutil.AClrSvf') IS NOT NULL DROP FUNCTION tSQLt_testutil.AClrSvf;
  IF OBJECT_ID('tSQLt_testutil.AClrTvf') IS NOT NULL DROP FUNCTION tSQLt_testutil.AClrTvf;
  IF OBJECT_ID('tSQLt_testutil.AnEmptyClrTvf') IS NOT NULL DROP FUNCTION tSQLt_testutil.AnEmptyClrTvf;
  IF EXISTS (SELECT 1 FROM sys.assemblies WHERE name = 'tSQLtTestUtilCLR')DROP ASSEMBLY tSQLtTestUtilCLR;
END
GO
CREATE TYPE tSQLt_testutil.DataTypeNoEqual EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.DataTypeNoEqual];
CREATE TYPE tSQLt_testutil.DataTypeWithEqual EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.DataTypeWithEqual];
CREATE TYPE tSQLt_testutil.DataTypeByteOrdered EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.DataTypeByteOrdered];
GO
CREATE FUNCTION tSQLt_testutil.AClrSvf(@p1 NVARCHAR(MAX), @p2 NVARCHAR(MAX))RETURNS NVARCHAR(MAX) 
       AS EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.ClrFunctions].AClrSvf;
GO
CREATE FUNCTION tSQLt_testutil.AClrTvf(@p1 NVARCHAR(MAX), @p2 NVARCHAR(MAX))RETURNS TABLE(id INT, val NVARCHAR(MAX))
       AS EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.ClrFunctions].AClrTvf;
GO
CREATE FUNCTION tSQLt_testutil.AnEmptyClrTvf(@p1 NVARCHAR(MAX), @p2 NVARCHAR(MAX))RETURNS TABLE(id INT, val NVARCHAR(MAX))
       AS EXTERNAL NAME tSQLtTestUtilCLR.[tSQLtTestUtilCLR.ClrFunctions].AnEmptyClrTvf;
GO


GO

GO
EXEC tSQLt.NewTestClass 'tSQLt_testutil_test';
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeNoEqual can be serialized]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeNoEqual;
  DECLARE @inst1bin BINARY(5);
  DECLARE @inst2 tSQLt_testutil.DataTypeNoEqual;
  DECLARE @inst2bin BINARY(5);

  SET @inst1 = '1';
  SET @inst1bin = CAST(@inst1 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst1bin;

  SET @inst2 = CAST(@inst1bin AS tSQLt_testutil.DataTypeNoEqual);
  SET @inst2bin = CAST(@inst2 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst2bin;
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeNoEqual has constant ToString()]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeNoEqual;
  DECLARE @inst1str NVARCHAR(MAX);
  DECLARE @inst2 tSQLt_testutil.DataTypeNoEqual;
  DECLARE @inst2str NVARCHAR(MAX);

  SET @inst1 = '1';
  SET @inst2 = '2';
  
  SET @inst1str = @inst1.ToString();
  SET @inst2str = @inst2.ToString();
  
  EXEC tSQLt.AssertEqualsString @inst1str,@inst2str;
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeNoEqual cannot compare]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  BEGIN TRY
    EXEC('IF(CAST( ''1'' AS tSQLt_testutil.DataTypeNoEqual) = CAST( ''2'' AS tSQLt_testutil.DataTypeNoEqual)) PRINT 1;')
  END TRY  
  BEGIN CATCH
  SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertEqualsString 'Invalid operator for data type. Operator equals equal to, type equals DataTypeNoEqual.',@Message;
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeNoEqual cannot GROUP BY]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  CREATE TABLE tSQLt_testutil_test.tmp1(
    id INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
    dtne tSQLt_testutil.DataTypeNoEqual NULL
  );
  
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');

  BEGIN TRY
    EXEC('SELECT dtne,COUNT(1) Cnt FROM tSQLt_testutil_test.tmp1 GROUP BY dtne;');
  END TRY  
  BEGIN CATCH
  SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertEqualsString 'The type "DataTypeNoEqual" is not comparable. It cannot be used in the GROUP BY clause.',@Message;
  
END
GO
------------------------------------------------------------------------------------------------------------
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeWithEqual can be serialized]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeWithEqual;
  DECLARE @inst1bin BINARY(5);
  DECLARE @inst2 tSQLt_testutil.DataTypeWithEqual;
  DECLARE @inst2bin BINARY(5);

  SET @inst1 = '1';
  SET @inst1bin = CAST(@inst1 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst1bin;

  SET @inst2 = CAST(@inst1bin AS tSQLt_testutil.DataTypeWithEqual);
  SET @inst2bin = CAST(@inst2 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst2bin;
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeWithEqual has constant ToString()]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeWithEqual;
  DECLARE @inst1str NVARCHAR(MAX);
  DECLARE @inst2 tSQLt_testutil.DataTypeWithEqual;
  DECLARE @inst2str NVARCHAR(MAX);

  SET @inst1 = '1';
  SET @inst2 = '2';
  
  SET @inst1str = @inst1.ToString();
  SET @inst2str = @inst2.ToString();
  
  EXEC tSQLt.AssertEqualsString @inst1str,@inst2str;
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeWithEqual has CompareTo (but we can't use it...)]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  DECLARE @inst1 tSQLt_testutil.DataTypeWithEqual;

  SET @inst1 = '1';
  
  BEGIN TRY
    PRINT @inst1.CompareTo(CAST(@inst1 AS BINARY(5)));
  END TRY  
  BEGIN CATCH
    SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertLike '%Object is not a DataTypeWithEqual.%',@Message;

END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeWithEqual cannot compare]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  BEGIN TRY
    EXEC('IF(CAST( ''1'' AS tSQLt_testutil.DataTypeWithEqual) = CAST( ''2'' AS tSQLt_testutil.DataTypeWithEqual)) PRINT 1;')
  END TRY  
  BEGIN CATCH
  SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertEqualsString 'Invalid operator for data type. Operator equals equal to, type equals DataTypeWithEqual.',@Message;
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeWithEqual cannot GROUP BY]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  CREATE TABLE tSQLt_testutil_test.tmp1(
    id INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
    dtne tSQLt_testutil.DataTypeWithEqual NULL
  );
  
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');

  BEGIN TRY
    EXEC('SELECT dtne,COUNT(1) Cnt FROM tSQLt_testutil_test.tmp1 GROUP BY dtne;');
  END TRY  
  BEGIN CATCH
  SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertEqualsString 'The type "DataTypeWithEqual" is not comparable. It cannot be used in the GROUP BY clause.',@Message;
  
END
GO
------------------------------------------------------------------------------------------------------------
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeByteOrdered can be serialized]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeByteOrdered;
  DECLARE @inst1bin BINARY(5);
  DECLARE @inst2 tSQLt_testutil.DataTypeByteOrdered;
  DECLARE @inst2bin BINARY(5);

  SET @inst1 = '1';
  SET @inst1bin = CAST(@inst1 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst1bin;

  SET @inst2 = CAST(@inst1bin AS tSQLt_testutil.DataTypeByteOrdered);
  SET @inst2bin = CAST(@inst2 AS BINARY(5));
  EXEC tSQLt.AssertEquals 0x0001000000, @inst2bin;
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeByteOrdered has constant ToString()]
AS
BEGIN
  DECLARE @inst1 tSQLt_testutil.DataTypeByteOrdered;
  DECLARE @inst1str NVARCHAR(MAX);
  DECLARE @inst2 tSQLt_testutil.DataTypeByteOrdered;
  DECLARE @inst2str NVARCHAR(MAX);

  SET @inst1 = '1';
  SET @inst2 = '2';
  
  SET @inst1str = @inst1.ToString();
  SET @inst2str = @inst2.ToString();
  
  EXEC tSQLt.AssertEqualsString @inst1str,@inst2str;
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeByteOrdered has CompareTo (but we can't use it...)]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  DECLARE @inst1 tSQLt_testutil.DataTypeByteOrdered;

  SET @inst1 = '1';
  
  BEGIN TRY
    PRINT @inst1.CompareTo(CAST(@inst1 AS BINARY(5)));
  END TRY  
  BEGIN CATCH
    SELECT @Message = ERROR_MESSAGE()
  END CATCH
  
  EXEC tSQLt.AssertLike '%Object is not a DataTypeByteOrdered.%',@Message;

END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeByteOrdered can compare]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  IF(CAST( '1' AS tSQLt_testutil.DataTypeByteOrdered) = CAST( '2' AS tSQLt_testutil.DataTypeByteOrdered))
  BEGIN
    EXEC tSQLt.Fail '1 and 2 should not be equal...';
  END  
  
END
GO
CREATE PROCEDURE tSQLt_testutil_test.[test DataTypeByteOrdered can GROUP BY]
AS
BEGIN
  DECLARE @Message NVARCHAR(MAX);
  SET @Message = '<No Error>';
  
  CREATE TABLE tSQLt_testutil_test.tmp1(
    id INT IDENTITY(1,1) PRIMARY KEY CLUSTERED,
    dtne tSQLt_testutil.DataTypeByteOrdered NULL
  );
  
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('1');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('2');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('2');
  INSERT INTO tSQLt_testutil_test.tmp1(dtne)VALUES('2');

  SELECT CAST(dtne AS BINARY(5)) dtne,COUNT(1) cnt 
  INTO #actual
  FROM tSQLt_testutil_test.tmp1 GROUP BY dtne;
  
  SELECT TOP(0)* INTO #expected FROM #actual;
  INSERT INTO #expected(dtne, cnt)
  SELECT 0x0001000000, 2
  UNION ALL
  SELECT 0x0002000000, 3;
  
  EXEC tSQLt.AssertEqualsTable '#expected','#actual';
END
GO



GO

