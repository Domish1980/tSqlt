#tSQLt CI
name: tSQLt_CI_$(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: none
pr: none

pool:
  vmImage: 'vs2017-win2016'

variables:
  - name: ArtifactBranchName
    value: tSQLt$(Build.SourceVersion)

resources:
  repositories:
  - repository: tSQLtArtifacts
    type: github
    name: tSQLt/tmp6
    endpoint: GitHub-tSQLt-Robot
  
  
stages:
- stage: Build_tSQLt

  jobs:
  - job: Check_If_Built_Already
    steps:
    - checkout: tSQLtArtifacts
      clean: true
      fetchDepth: 1
      lfs: false
      persistCredentials: true
      path: tSQLtArtifacts

    - task: PowerShell@2
      name: list_remote_branch
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "git failed!"}};          
          
          Set-Location "$(Pipeline.Workspace)\tSQLtArtifacts\";
          
          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)"); 
          try{

            $remoteURL = git config remote.origin.url
            $CheckIfGitOk.invoke($?);
            
            $branch = (git ls-remote --heads $remoteURL $(ArtifactBranchName))
            $CheckIfGitOk.invoke($?);

            if( -not [string]::IsNullOrEmpty($branch) )
            {
              Write-Host "##vso[task.setvariable variable=BuiltAlready;isOutput=true]true";
              Write-Host "Build Branch Found";
            }
            else
            {
              Write-Host "##vso[task.setvariable variable=BuiltAlready;isOutput=true]false";
              Write-Host "Build Branch NOT Found";
            };
          }catch{
            throw "git failed. See prior errors.";
          } 
          git status

  - job: CompileCLR
    dependsOn: Check_If_Built_Already
    condition: and(succeeded(),eq(dependencies.Check_If_Built_Already.outputs['list_remote_branch.BuiltAlready'], 'false'))
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2

    variables:
      CertificatePath: '$(Build.Repository.LocalPath)\tsqltclr\OfficialSigningKey\tSQLtOfficialSigningKey.pfx'

    steps:

    - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      clean: true
      lfs: false

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'

    - task: PowerShell@2
      name: Install_tSQLt_OfficialSigningKey
      inputs:
        targetType: 'inline'
        script: |
          $pfxSecretBytes = [System.Convert]::FromBase64String('$(tSQLtOfficialSigningKey-Base64)')
          $pfxPath = "$(Build.SourcesDirectory)/Build/tSQLtOfficialSigningKey.pfx"
          [System.IO.File]::WriteAllBytes($pfxPath, $pfxSecretBytes)
          &"$(Build.SourcesDirectory)/Build/SnInstallPfx" $(Build.SourcesDirectory)/Build/tSQLtOfficialSigningKey.pfx '$(tSQLtSigningKeyPassword)' tSQLt_OfficialSigningKey

    - task: MSBuild@1
      displayName: 'Build solution tSQLtCLR/tSQLtCLR.sln'
      inputs:
        solution: tSQLtCLR/tSQLtCLR.sln
        platform: 'Any CPU'
        configuration: CruiseControl

    - task: CopyFiles@2
      displayName: 'Copy all dll files to the ArtifactStagingDirectory'
      inputs:
        SourceFolder: tSQLtCLR
        Contents: '*/bin/*/*.dll'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/tSQLtCLR'
        flattenFolders: true

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/tSQLtCLR'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        replaceExistingArchive: true
        verbose: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        artifact: 'tSQLtClrDlls'
        publishLocation: 'pipeline'

  - job: BuildSQLScripts
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2
    dependsOn: CompileCLR

    steps:

    - checkout: self
      clean: true
      lfs: false

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtClrDlls'
        itemPattern: '*.zip'
        targetPath: '$(Build.SourcesDirectory)\Build\output\CLRBuild'

    - task: Ant@1
      displayName: 'Ant -debug Build/tSQLt.build.xml'
      inputs:
        buildFile: Build/tSQLt.build.xml
        options: '-debug '
        targets: all
        publishJUnitResults: false

    - task: PowerShell@2
      name: CreateArtifact
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $basePath = "$(Build.SourcesDirectory)\Build\output\tSQLtBuild\";
          $artifactPath = ($basePath+"Artifact\");
          New-Item -Path $artifactPath  -ItemType directory -Force
          $ArtifactFiles = (@("ReadMe.txt","tSQLt.tests.zip","tSQLtFacade.zip","tSQLtFiles.zip","tSQLtSnippets(SQLPrompt).zip","Version.txt")| ForEach-Object { $basePath + $_ });
          $ArtifactFiles|Copy-Item -Verbose -Destination $artifactPath;
          Set-Content -Path ($artifactPath+"CommitId.txt") -Value "$(Build.SourceVersion)"

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/Build/output/tSQLtBuild/Artifact'
        artifact: 'tSQLtAndTests'
        publishLocation: 'pipeline'

##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

  - job: PublishArtifactToRepo
    dependsOn: BuildSQLScripts

    steps:
    - checkout: tSQLtArtifacts
      clean: true
      lfs: false
      fetchDepth: 1
      persistCredentials: true
      path: tSQLtArtifacts

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'

    - task: DownloadPipelineArtifact@2
      name: DownloadPipelineArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtAndTests'
        targetPath: '$(Pipeline.Workspace)\tmp'

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'

    - task: PowerShell@2
      name: StoreInArtifactRepo
      env:
        GITHUB_USERNAME: $(GitHubUserName)
        GITHUB_EMAIL: $(GitHubEmail)
      inputs:
        targetType: 'inline'
        failOnStderr: false
        ## git seems to print progress to stderror
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "GIT Failed!"}};          

          Set-Location "$(Pipeline.Workspace)\tSQLtArtifacts\";
          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)"); 
          try{
            git config --global user.email "$env:GITHUB_EMAIL"
            git config --global user.name "$env:GITHUB_USERNAME"
            git status
            git remote show origin

            Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
            Write-Host "";
            git branch --remotes
            Write-Host "";
            Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";

            git switch -c "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git rm -r *.*
            $CheckIfGitOk.invoke($?);

            Copy-Item -Path "$(Pipeline.Workspace)\tmp\*" -Verbose

            git add *.*
            $CheckIfGitOk.invoke($?);

            git commit -m "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git push origin "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);
          }catch{
            throw "Git Failed. See prior errors.";
          } 
          git status
    
    
###############################################################################
###############################################################################
###############################################################################

- stage: Validate
  displayName: ValidateAll
  dependsOn: Build_tSQLt
  variables:
    NamePreFix: 'tSQLtCI_'

  jobs:

  - job: Validate
    strategy:
      matrix: {
        '2008R2':{'SQLVersionEdition':'2008R2Std'},
        '2012':{'SQLVersionEdition':'2012Ent'},
        '2014':{'SQLVersionEdition':'2014'},
        '2016':{'SQLVersionEdition':'2016'},
        '2017':{'SQLVersionEdition':'2017'},
        '2019':{'SQLVersionEdition':'2019'}, 
         }

    variables:
      SQLCMDPath: 'C:\Program Files\Microsoft SQL Server\110\Tools\Binn'

    steps:
    - checkout: self
      clean: true
      lfs: false
      path: tSQLt

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'

    - checkout: tSQLtArtifacts
      clean: true
      lfs: false
      fetchDepth: 1
      persistCredentials: true
      path: tSQLtArtifacts
  
    - task: PowerShell@2
      name: GetArtifact
      inputs:
        targetType: 'inline'
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "GIT Failed!"}};          

          Set-Location "$(Pipeline.Workspace)/tSQLtArtifacts";
          $ArtifactTargetPath= '$(Pipeline.Workspace)/tSQLt/Build_Artifact'
          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)");

          try{
            git fetch origin $(ArtifactBranchName):$(ArtifactBranchName)
            $CheckIfGitOk.invoke($?);
            git checkout $(ArtifactBranchName)
            $CheckIfGitOk.invoke($?);
          }catch{
            throw "git failed. See prior errors.";
          } 

          New-Item -Path $ArtifactTargetPath  -ItemType directory -Force
          Copy-Item -Path "*" -Verbose -Destination $ArtifactTargetPath

    - task: AzurePowerShell@4
      name: CreateVMAndMore
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
        CONTACT_EMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONEMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONURL: $(tSQLt-Slack-CI-Pipeline-WebHook)
        SQLPORTMINIMUM: $(SqlPortMinimum)
        SQLPORTMAXIMUM: $(SqlPortMaximum)
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        azurePowerShellVersion: 'LatestVersion'
        ScriptType: 'InlineScript'
        Inline: |
          Set-Location $(Pipeline.Workspace)/tSQLt
          .("Build/CommonFunctionsAndMethods.ps1")

          $SqlPort = Get-Random -minimum $env:SQLPORTMINIMUM -maximum $env:SQLPORTMAXIMUM


          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Executing CreateVM.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          $Parameters = @{
            NamePreFix="$(NamePreFix)";
            BuildId="$(Build.BuildId)";
            SQLVersionEdition="$(SQLVersionEdition)";
            SQLPort="$SqlPort";
            LabShutdownNotificationEmail="$env:LABVMSHUTDOWNNOTIFICATIONEMAIL";
            LabShutdownNotificationURL="$env:LABVMSHUTDOWNNOTIFICATIONURL";
            SQLUserName="$env:USER_NAME";
            SQLPassword="$env:PASSWORD";
          }; 
          $DTLDetails = .'CI/CreateVM.ps1' @Parameters
    
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Done: Executing CreateVM.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
              
          $SerializedDTLDetails=(ConvertTo-JSON -InputObject $DTLDetails -Compress);
          
          $SerializedDTLDetails
          Write-Host "##vso[task.setvariable variable=SerializedDTLDetails;isOutput=true]$SerializedDTLDetails"
    
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

    - task: PowerShell@2
      name: GetVariablesInPlace
      inputs:
        targetType: 'inline'
        script: |
          Write-Host '$(CreateVMAndMore.SerializedDTLDetails)';

          $DTLDetails = (ConvertFrom-JSON '$(CreateVMAndMore.SerializedDTLDetails)');
          #-----------------------------------------------------------------------#
          # IMPORTANT (and, you've got to be kidding me):                         #
          # The space below is absolutely required to make the ANT Task work.     #
          #--------------------------------------|--------------------------------#
          $FQDNAndPort = $DTLDetails.SQLVmFQDN+", "+$DTLDetails.SQLVmPort;
          #--------------------------------------|--------------------------------#
          #-----------------------------------------------------------------------#
          $SQLVersion = $DTLDetails.SQLVersion;
          Write-Host "##vso[task.setvariable variable=FQDNAndPort]$FQDNAndPort"
          Write-Host "##vso[task.setvariable variable=SQLVersion]$SQLVersion"

    - task: PowerShell@2
      name: PrintSQLVersionInfo
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
      inputs:
        targetType: 'inline'
        script: |
          $DS = Invoke-Sqlcmd -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "$(FQDNAndPort)" -Username "$env:USER_NAME" -Password "$env:PASSWORD" -As DataSet
          $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" }    
    
    - task: Ant@1
      name: Run_tSQLt_validatebuild_xml
      inputs:
        buildFile: '$(Pipeline.Workspace)/tSQLt/Build/tSQLt.validatebuild.xml'
        options: '-Ddb.version="$(SQLVersion)" -Ddb.server="$(FQDNAndPort)" -Ddb.name=tSQLt_dev -Ddb.login="-U $(tSQLt-UserForCIEnvironment-UserName) -P $(tSQLt-UserForCIEnvironment-Password)" -Dsqlcmd.path="$(SQLCMDPath)"'
        targets: 'all'
        publishJUnitResults: true
        testResultsFiles: '$(Pipeline.Workspace)/tSQLt/**/TestResults*.xml'
        testRunTitle: '$(SQLVersionEdition)'
        javaHomeOption: 'JDKVersion'
        
    - task: PowerShell@2
      name: CreateTestResultArtifact
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          "---------------------------------------------------"
          $basePath = "$(Pipeline.Workspace)";
          $basePath;
          "==================================================="
          $artifactPath = "$basePath\tSQLt\Build\output\TestResults\";
          $artifactPath;
          "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"
          New-Item -Path $artifactPath  -ItemType directory -Force
          "== == == == == == == == == == == == == == == == == "
          ##(Get-ChildItem $basePath -recurse)|Out-File  -FilePath $artifactPath+"dir.txt"
          ##(Get-ChildItem $basePath -recurse -include "*TestResults*.xml").FullName; 
          "==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-"
          ##(Get-ChildItem $basePath -recurse -include "*TestResults*.xml").FullName|Copy-Item -Destination $artifactPath -recurse -PassThru
          Expand-Archive -Path "$basePath\tSQLt\Build\output\Validate\TestResults.zip" -DestinationPath $artifactPath
          Set-Content -Path ($artifactPath+"CommitId.txt") -Value "$(Build.SourceVersion)"
          "=== === === === === === === === === === === === ==="

    - task: PublishPipelineArtifact@1
      name: PublishTestResultArtifact
      inputs:
        targetPath: '$(Pipeline.Workspace)/tSQLt/Build/output/TestResults'
        artifact: 'TestResults_$(SQLVersionEdition)'
        publishLocation: 'pipeline'
    
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

    - task: PowerShell@2
      name: TagArtifact
      inputs:
        targetType: 'inline'
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]git failed!";throw "git failed!"}};    
          
          $TagName = "$(SQLVersionEdition)_$(Build.BuildId)"

          Set-Location "$(Pipeline.Workspace)\tSQLtArtifacts\";

          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)"); 
          try{
            git status
            git remote show origin

            git switch "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git tag $TagName;
            $CheckIfGitOk.invoke($?);

            git push --tags
            $CheckIfGitOk.invoke($?);

            git status
          }catch{
            throw "git failed. See prior errors.";
          }  

##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
      
    - task: AzurePowerShell@4
      name: ShutdownVM
      condition: always()
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        azurePowerShellVersion: 'LatestVersion'
        ScriptType: 'InlineScript'
        Inline: |

          Write-Host '$(CreateVMAndMore.SerializedDTLDetails)'

          $DTLDetails = (ConvertFrom-JSON '$(CreateVMAndMore.SerializedDTLDetails)');
          $HiddenVmName = $DTLDetails.HiddenVmName;
          $HiddenVmRGName = $DTLDetails.HiddenVmRGName;
    
          Set-Location $(Build.Repository.LocalPath)
          .("Build/CommonFunctionsAndMethods.ps1")
    
          $DTLDetails|Out-String|Log-Output;
          
          Stop-AzVM -Name "$HiddenVmName" -ResourceGroupName "$HiddenVmRGName" -Force|Out-String|Log-Output;
