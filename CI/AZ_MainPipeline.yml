#tSQLt CI

trigger: none
pr: none

pool:
  vmImage: 'vs2017-win2016'

resources:
  repositories:
  - repository: tSQLtArtifacts
    type: github
    name: tSQLt/tmp6
    endpoint: GitHub-tSQLt-Robot
  
  
stages:
    
- stage: Build_tSQLt

  jobs:

  - job: CompileCLR
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2

    variables:
      CertificatePath: '$(Build.Repository.LocalPath)\tsqltclr\OfficialSigningKey\tSQLtOfficialSigningKey.pfx'

    steps:

    - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
      clean: true
      fetchDepth: 10
      lfs: false

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'

    - task: PowerShell@2
      name: Install_tSQLt_OfficialSigningKey
      inputs:
        targetType: 'inline'
        script: |
          $pfxSecretBytes = [System.Convert]::FromBase64String('$(tSQLtOfficialSigningKey-Base64)')
          $pfxPath = "$(Build.SourcesDirectory)/Build/tSQLtOfficialSigningKey.pfx"
          [System.IO.File]::WriteAllBytes($pfxPath, $pfxSecretBytes)
          &"$(Build.SourcesDirectory)/Build/SnInstallPfx" $(Build.SourcesDirectory)/Build/tSQLtOfficialSigningKey.pfx '$(tSQLtSigningKeyPassword)' tSQLt_OfficialSigningKey

    - task: MSBuild@1
      displayName: 'Build solution tSQLtCLR/tSQLtCLR.sln'
      inputs:
        solution: tSQLtCLR/tSQLtCLR.sln
        platform: 'Any CPU'
        configuration: CruiseControl

    - task: CopyFiles@2
      displayName: 'Copy all dll files to the ArtifactStagingDirectory'
      inputs:
        SourceFolder: tSQLtCLR
        Contents: '*/bin/*/*.dll'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/tSQLtCLR'
        flattenFolders: true


    - task: authenticode-sign@4
      condition: false
      inputs:
        filePath: 'tSQLt*.dll'
        signRootPath: '$(Build.ArtifactStagingDirectory)/tSQLtCLR'
        timestampServer: 'http://timestamp.digicert.com'
        timestampAlgo: 'sha256'
        timestampServerDelay: '15'
        fileAlgo: 'sha256'
        retryCount: '5'
        certificateLocation: 'pfxFile'
        pfxFile: '$(CertificatePath)'
        pfxPassword: '$(tSQLtSigningKeyPassword)'
        additionalArguments: '/debug'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/tSQLtCLR'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        replaceExistingArchive: true
        verbose: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        artifact: 'tSQLtClrDlls'
        publishLocation: 'pipeline'



  - job: BuildSQLScripts
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2
    dependsOn: CompileCLR

    steps:

    - checkout: self
      clean: true
      fetchDepth: 10
      lfs: false

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtClrDlls'
        itemPattern: '*.zip'
        targetPath: '$(Build.SourcesDirectory)\Build\output'

    - task: Ant@1
      displayName: 'Ant -debug Build/tSQLt.build.xml'
      inputs:
        buildFile: Build/tSQLt.build.xml
        options: '-debug '
        targets: all
        publishJUnitResults: false

    - task: PowerShell@2
      name: CreateArtifact
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $BasePath = "$(Build.SourcesDirectory)\Build\output\";
          $ArtifactPath = ($BasePath+"Artifact\");
          New-Item -Path $ArtifactPath  -ItemType directory -Force
          $ArtifactFiles = (@("Version.txt","tSQLt.zip","tSQLt.tests.zip")|%{$BasePath+$_});
          $ArtifactFiles|Copy-Item -Verbose -Destination $ArtifactPath;
          Set-Content -Path ($ArtifactPath+"CommitId.txt") -Value "$(Build.SourceVersion)"

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/Build/output/Artifact'
        artifact: 'tSQLtAndTests'
        publishLocation: 'pipeline'

##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

  - job: publishArtifactToRepo
    dependsOn: 
    - CompileCLR
    - BuildSQLScripts

    steps:

    - checkout: tSQLtArtifacts
      clean: true
      fetchDepth: 10
      lfs: false
      persistCredentials: true
      path: tSQLtArtifacts

    - task: DownloadPipelineArtifact@2
      name: DownloadPipelineArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtAndTests'
        targetPath: '$(Pipeline.Workspace)\tmp'

    - task: PowerShell@2
      name: StoreInArtifactRepo
      env:
        GITHUB_USERNAME: $(GitHubUserName)
        GITHUB_EMAIL: $(GitHubEmail)
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "GIT Failed!"}};          
          Get-Location;
          $BuildSourceVersion = (Get-Content -Path "$(Pipeline.Workspace)\tmp\CommitId.txt" -totalcount 1);
          $BranchName = "tSQLt" + $BuildSourceVersion
          Set-Location "$(Pipeline.Workspace)\tSQLtArtifacts\";
          Write-Host ("BranchName: {0}" -f $BranchName) -ForegroundColor DarkGreen -BackgroundColor White; 
          try{
            git config --global user.email "$env:GITHUB_EMAIL"
            git config --global user.name "$env:GITHUB_USERNAME"
            git config --system core.longpaths true
            git status
            git remote show origin

            git switch -c "$BranchName"
            $CheckIfGitOk.invoke($?);

            Copy-Item -Path "$(Pipeline.Workspace)\tmp\*" -Verbose

            git add *.*
            $CheckIfGitOk.invoke($?);

            git commit -m "$BranchName"
            $CheckIfGitOk.invoke($?);

            git push origin "$BranchName"
            $CheckIfGitOk.invoke($?);
          }catch{
            throw "Git Failed. See prior errors.";
          } 
          git status
    
    
###############################################################################
###############################################################################
###############################################################################

- stage: Validate_tSQLt_2016
  dependsOn: Build_tSQLt
  condition: false  ##<<<<<<<<<<<<<<<<<<<<<<<<<<<<<REMEMBER>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  variables:
    SQLVersionEdition: 2016
    NamePreFix: 'tSQLtCI_'

  jobs:

  - job: Setup_VM

    steps:
    - checkout: self
      clean: true
      fetchDepth: 10
      lfs: false

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'

    - task: AzurePowerShell@4
      name: CreateVMAndMore
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
        CONTACT_EMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONEMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONURL: $(tSQLt-Slack-CI-Pipeline-WebHook)
        SQLPORTMINIMUM: $(SqlPortMinimum)
        SQLPORTMAXIMUM: $(SqlPortMaximum)
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        azurePowerShellVersion: 'LatestVersion'
        ScriptType: 'InlineScript'
        Inline: |
          Set-Location $(Build.Repository.LocalPath)
          .("CI/CommonFunctionsAndMethods.ps1")

          $SqlPort = Get-Random -minimum $env:SQLPORTMINIMUM -maximum $env:SQLPORTMAXIMUM


          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Executing CreateVM.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          $Parameters = @{
            NamePreFix="$(NamePreFix)";
            BuildId="$(Build.BuildId)";
            SQLVersionEdition="$(SQLVersionEdition)";
            SQLPort="$SqlPort";
            LabShutdownNotificationEmail="$env:LABVMSHUTDOWNNOTIFICATIONEMAIL";
            LabShutdownNotificationURL="$env:LABVMSHUTDOWNNOTIFICATIONURL";
            SQLUserName="$env:USER_NAME";
            SQLPassword="$env:PASSWORD";
          }; 
          $DTLDetails = .'CI/CreateVM.ps1' @Parameters
    
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Done: Executing CreateVM.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
              
          $SerializedDTLDetails=(ConvertTo-JSON -InputObject $DTLDetails -Compress);
          
          $SerializedDTLDetails
          Write-Host "##vso[task.setvariable variable=SerializedDTLDetails;isOutput=true]$SerializedDTLDetails"
    
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

  - job: Run_Tests
    dependsOn: Setup_VM
    variables:
      SerializedDTLDetails: $[ dependencies.Setup_VM.outputs['CreateVMAndMore.SerializedDTLDetails'] ]
      SQLCMDPath: 'C:\Program Files\Microsoft SQL Server\110\Tools\Binn'
        
    steps:
    - checkout: self
      clean: true
      fetchDepth: 10
      lfs: false

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'

    - task: PowerShell@2
      name: GetVariablesInPlace
      inputs:
        targetType: 'inline'
        script: |
          
          $env:SerializedDTLDetails;

          $DTLDetails = (ConvertFrom-JSON $env:SerializedDTLDetails);
          #-----------------------------------------------------------------------#
          # IMPORTANT (and, you've got to be kidding me):                         #
          # The space below is absolutely required to make the ANT Task work.     #
          #--------------------------------------|--------------------------------#
          $FQDNAndPort = $DTLDetails.SQLVmFQDN+", "+$DTLDetails.SQLVmPort;
          #--------------------------------------|--------------------------------#
          #-----------------------------------------------------------------------#
          $SQLVersion = $DTLDetails.SQLVersion;
          Write-Host "##vso[task.setvariable variable=FQDNAndPort]$FQDNAndPort"
          Write-Host "##vso[task.setvariable variable=SQLVersion]$SQLVersion"

    - task: DownloadPipelineArtifact@2
      name: DownloadPipelineArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtAndTests'
        targetPath: '$(Build.SourcesDirectory)/Build_Artifact'

    - task: PowerShell@2
      name: PrintSQLVersionInfo
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
      inputs:
        targetType: 'inline'
        script: |
          $DS = Invoke-Sqlcmd -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "$(FQDNAndPort)" -Username "$env:USER_NAME" -Password "$env:PASSWORD" -As DataSet
          $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" }
    
    
    - task: Ant@1
      name: Run_tSQLt_validatebuild_xml
      inputs:
        buildFile: 'Build/tSQLt.validatebuild.xml'
        options: '-Ddb.version="$(SQLVersion)" -Ddb.server="$(FQDNAndPort)" -Ddb.name=tSQLt_dev -Ddb.login="-U $(tSQLt-UserForCIEnvironment-UserName) -P $(tSQLt-UserForCIEnvironment-Password)" -Dsqlcmd.path="\"$(SQLCMDPath)\""'
        targets: 'all'
        publishJUnitResults: true
        testResultsFiles: '**/?(Example)TestResults*.xml'
        testRunTitle: 'testtitle'
        javaHomeOption: 'JDKVersion'
    
    - task: PowerShell@2
      name: TestXMLOutput  ####<<---------Is this needed????
      condition: false
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          
          &"$(SQLCMDPath)\sqlcmd" -S "$(FQDNAndPort)" -U "$env:USER_NAME" -P "$env:PASSWORD" -d tSQLt_dev -i "$(Build.SourcesDirectory)/Build/GetTestResults.sql" -o "$(Build.SourcesDirectory)/Build/test20200420093015.txt"
    
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

#  - job: TagRepository
#    dependsOn: Run_Tests
#    condition: Always
#
#    steps:


##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##
##--##--##--##--##--##--##--##--##--##---##--##--##--##--##--##--##--##--##--##

  - job: CleanUp
    dependsOn: 
    - Run_Tests
    - Setup_VM
    variables:
      SerializedDTLDetails: $[ dependencies.Setup_VM.outputs['CreateVMAndMore.SerializedDTLDetails'] ]
    condition: Always()

    steps:
    - checkout: self
      clean: true
      fetchDepth: 10
      lfs: false
      
    - task: AzurePowerShell@4
      name: ShutdownVM
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        azurePowerShellVersion: 'LatestVersion'
        ScriptType: 'InlineScript'
        Inline: |

          $env:SerializedDTLDetails;

          $DTLDetails = (ConvertFrom-JSON $env:SerializedDTLDetails);
          $HiddenVmName = $DTLDetails.HiddenVmName;
          $HiddenVmRGName = $DTLDetails.HiddenVmRGName;
    
          Set-Location $(Build.Repository.LocalPath)
          .("CI/CommonFunctionsAndMethods.ps1")
    
          $DTLDetails|Out-String|Log-Output;
          
          Stop-AzVM -Name "$HiddenVmName" -ResourceGroupName "$HiddenVmRGName" -Force|Out-String|Log-Output;
