# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: none
pr: none
schedules:
  - cron: 0 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'


parameters:
- name: SQLCMDPath
  type: string
  default: 'C:\Program Files\Microsoft SQL Server\110\Tools\Binn'
- name: RequestingBuildId
  type: string
  default: 'NULL'


variables:
  - name: NamePreFix
    value: 'tSQLtCI_DevTestLab_'
  - name: ArtifactBranchName
    value: tSQLt$(Build.SourceVersion)

resources:
  repositories:
  - repository: tmp6
    type: github
    name: tSQLt/tmp6
    endpoint: GitHub-tSQLt-Robot
    ref: $(ArtifactBranchName)

jobs:
- job: joba
  condition: false
  
  variables:
    SQLVersionEdition: 2019
    NamePreFix: 'tSQLtCI_'
  
  steps:

  - checkout: self
    clean: true
    fetchDepth: 1
    lfs: false
    path: tSQLt


  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
      KeyVaultName: 'tSQLtSigningKey'
      SecretsFilter: '*'

  - task: CmdLine@2
    name: AgentInfo
    inputs:
      script: |
        @ECHO ON
        systeminfo
        "${{ parameters.SQLCMDPath }}\SQLCMD" -?
        SET
        ECHO $(Pipeline.Workspace)
        ECHO $(Agent.BuildDirectory)
        dir $(Pipeline.Workspace) /s

  - task: CmdLine@2
    name: GetCommitId
    inputs:
      script: |
        @ECHO ON
        ECHO %BUILD_SOURCEVERSION% >CommitId.txt
        MKDIR $(Pipeline.Workspace)\tmp1
        XCOPY CommitId.txt $(Pipeline.Workspace)\tmp1\

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)\tmp1\'
      artifact: 'tempArtifact'
      publishLocation: 'pipeline'

  - task: DownloadPipelineArtifact@2
    name: DownloadPipelineArtifact
    inputs:
      buildType: 'current'
      artifactName: 'tempArtifact'
      targetPath: '$(Pipeline.Workspace)\tmp2'

       
      
- job: SetupVM
  steps:
  - checkout: self
    clean: true
    fetchDepth: $(GitFetchDepth)
    lfs: false

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
      KeyVaultName: 'tSQLtSigningKey'
      SecretsFilter: '*'

  - task: AzurePowerShell@4
    name: CreateVMAndMore
    env:
      USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
      PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
      CONTACT_EMAIL: $(NotificationEmail)
      LABVMSHUTDOWNNOTIFICATIONEMAIL: $(NotificationEmail)
      LABVMSHUTDOWNNOTIFICATIONURL: $(tSQLt-Slack-CI-Pipeline-WebHook)
      SQLPORTMINIMUM: $(SqlPortMinimum)
      SQLPORTMAXIMUM: $(SqlPortMaximum)
    inputs:
      azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
      azurePowerShellVersion: 'LatestVersion'
      ScriptType: 'InlineScript'
      Inline: |
        Set-Location $(Build.Repository.LocalPath)
        .("CI/CommonFunctionsAndMethods.ps1")

        $SqlPort = Get-Random -minimum $env:SQLPORTMINIMUM -maximum $env:SQLPORTMAXIMUM


        Log-Output '==========================================================';
        Log-Output '==========================================================';
        Log-Output 'Executing CreateVM.ps1';
        Log-Output '==========================================================';
        Log-Output '==========================================================';
        $Parameters = @{
          NamePreFix="$(NamePreFix)";
          BuildId="$(Build.BuildId)";
          SQLVersionEdition="$(SQLVersionEdition)";
          SQLPort="$SqlPort";
          LabShutdownNotificationEmail="$env:LABVMSHUTDOWNNOTIFICATIONEMAIL";
          LabShutdownNotificationURL="$env:LABVMSHUTDOWNNOTIFICATIONURL";
          SQLUserName="$env:USER_NAME";
          SQLPassword="$env:PASSWORD";
        }; 
        $DTLDetails = .'CI/CreateVM.ps1' @Parameters
  
        Log-Output '==========================================================';
        Log-Output '==========================================================';
        Log-Output 'Done: Executing CreateVM.ps1';
        Log-Output '==========================================================';
        Log-Output '==========================================================';
            
        $SerializedDTLDetails=(ConvertTo-JSON -InputObject $DTLDetails -Compress);
        
        $SerializedDTLDetails
        Write-Host "##vso[task.setvariable variable=SerializedDTLDetails;isOutput=true]$SerializedDTLDetails"