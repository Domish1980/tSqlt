# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: none
pr: none
schedules:
  - cron: 0 12 17 4 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 17 4 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 0 12 20 4 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 20 4 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'

variables:
  NamePreFix: 'tSQLtCI_DevTestLab_'

steps:

- task: CmdLine@2
  condition: false
  inputs:
    script: |
      echo end pipeline here      
      echx

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    KeyVaultName: 'tSQLtSigningKey'
    SecretsFilter: '*'

- task: PowerShell@2
  name: Generate_DevTest_Lab_Name
  inputs:
    targetType: 'inline'
    script: |
      $DevTestLabName = If ([string]::IsNullOrEmpty($env:DevTestLabNameOverride)) {("$(NamePreFix)" + (Get-Date).tostring(“yyyyMMdd”) + '_' + $(Build.BuildId))} else {($env:DevTestLabNameOverride)}
      $DevTestLabRGName = $DevTestLabName+'_RG'
      $DevTestLabVNetName = $DevTestLabName+'_VNet0001'
      $vmName = If ([string]::IsNullOrEmpty($env:vmNameOverride)) {('V$(Build.BuildId)'+(('$(template)').replace('-',''))+''+$DevTestLabName).substring(0,15)} else {($env:vmNameOverride)}
      Write-Host 'DevTestLabRGName: ' $DevTestLabRGName
      Write-Host "##vso[task.setvariable variable=DevTestLabRGName;]$DevTestLabRGName"
      Write-Host 'DevTestLabName: ' $DevTestLabName
      Write-Host "##vso[task.setvariable variable=DevTestLabName;]$DevTestLabName"
      Write-Host 'DevTestLabVNetName: ' $DevTestLabVNetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetName;]$DevTestLabVNetName"
      Write-Host 'vmName: ' $vmName
      Write-Host "##vso[task.setvariable variable=vmName;]$vmName"

- task: AzurePowerShell@4
  name: Create_Resource_Group
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host 'Creating Resource Group:' $(DevTestLabRGName)
      Set-PSDebug -Trace 1;
      New-AzResourceGroup -Name "$(DevTestLabRGName)" -Location "East US 2" -Tag @{Department="tSQLtCI"; Ephemeral="True"} -Force
      Set-PSDebug -Trace 0;
      Write-Host 'Done.'

##Need to make sure we're validating the right templates here (and remove unused ones from git repository)

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VNet_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateVNetTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_DTL_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/DevTestLabTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VM_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateVMTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VMSchedule_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateVMScheduleTemplate.json'
    deploymentMode: 'Validation'

- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_SQLVirtualMachine_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(DevTestLabRGName)'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/CreateSQLVirtualMachineTemplate.json'
    deploymentMode: 'Validation'

- task: AzurePowerShell@4
  name: Create_VNet
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Set-PSDebug -Trace 1;
      $VNet = New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/CreateVNetTemplate.json" -VNet_name "$(DevTestLabVNetName)" -SQL_Port "$(SQL_Port)"
      Set-PSDebug -Trace 0;
      $DevTestLabVNetSubnetName = $VNet.Outputs.subnetName.Value
      Write-Host 'DevTestLabVNetSubnetName: ' $DevTestLabVNetSubnetName
      Write-Host "##vso[task.setvariable variable=DevTestLabVNetSubnetName;]$DevTestLabVNetSubnetName"

- task: AzurePowerShell@4
  name: Create_DevTest_Lab_With_Other_Resources
  condition: and(succeeded(), eq(variables['CreateNewEnvironment'], '1'))
  inputs:
    azurePowerShellVersion: 'LatestVersion'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Set-PSDebug -Trace 1;
      New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/DevTestLabTemplate.json" -newLabName "$(DevTestLabName)" -VNetName "$(DevTestLabVNetName)" -SubNetName "$(DevTestLabVNetSubnetName)"
      Set-PSDebug -Trace 0;

- task: AzurePowerShell@4
  name: CreateVM
  condition: and(succeeded(), eq(variables['CreateNewVM'], '1'))
  env:
    USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
    PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
    CONTACT_EMAIL: $(NotificationEmail)
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Creating New VM'
      Set-PSDebug -Trace 1;
      $VM = New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/CreateVMTemplate.json" -labName "$(DevTestLabName)" -newVMName "$(vmName)" -DevTestLabVirtualNetworkName "$(DevTestLabVNetName)" -DevTestLabVirtualNetworkSubNetName "$(DevTestLabVNetSubnetName)" -userName "$env:USER_NAME" -password "$env:PASSWORD" -ContactEmail "$env:CONTACT_EMAIL"
      Set-PSDebug -Trace 0;
      Write-Host 'Finished Creating New VM'


- task: AzurePowerShell@4
  name: get_VM_parameters
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'FilePath'
    ScriptPath: 'CI/GetLabVMParams.ps1'
    ScriptArguments: '-ResourceGroupName "$(DevTestLabRGName)" -VMName "$(vmName)"' 
    azurePowerShellVersion: 'LatestVersion'

- task: AzurePowerShell@4
  name: UpdateAutoShutdown
  env:
    CONTACT_EMAIL: $(NotificationEmail)
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Update VM AutoShutdown Schedule'
      Write-Host "CONTACT_EMAIL:" "$env:CONTACT_EMAIL"
      Set-PSDebug -Trace 1;
      $VM = New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/CreateVMScheduleTemplate.json" -labName "$(DevTestLabName)" -newVMName "$(vmName)" -ContactEmail "$env:CONTACT_EMAIL"
      Set-PSDebug -Trace 0;
      Write-Host 'Finished Updating VM AutoShutdown Schedule'


- task: AzurePowerShell@4
  name: StartVM
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Starting the New VM'
      Set-PSDebug -Trace 1;
      Start-AzVM -Name "$(vmName)" -ResourceGroupName "$(labVmRgName)"
      Set-PSDebug -Trace 0;

- task: AzurePowerShell@4
  name: SetupSQL
  env:
    USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
    PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      Write-Host 'Creating New VM'
      Set-PSDebug -Trace 1;
      $VM = New-AzResourceGroupDeployment -ResourceGroupName "$(labVmRgName)" -TemplateFile "CI/CreateSQLVirtualMachineTemplate.json" -sqlPortNumber "$(SQL_Port)" -sqlAuthenticationLogin "$env:USER_NAME" -sqlAuthenticationPassword "$env:PASSWORD" -newVMName "$(vmName)" -newVMRID "$(labVmComputeId)"
      Set-PSDebug -Trace 0;
      Write-Host 'Finished Creating New VM'
      $labVMId = $VM.Outputs.labVMId.Value
      Write-Host 'labVMId: ' $labVMId
      Write-Host "##vso[task.setvariable variable=labVMId;]$labVMId"

- task: PowerShell@2
  name: PrintSQLVersionInfo
  env:
    USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
    PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      $DS = Invoke-Sqlcmd -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "$(labVMFqdn),$(SQL_Port)" -Username "$env:USER_NAME" -Password "$env:PASSWORD" -As DataSet
      $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" }

- task: PowerShell@2
  name: PrepSQLServer
  env:
    USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
    PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      $DS = Invoke-Sqlcmd -InputFile "$(Build.SourcesDirectory)\Build\PrepServer2014.sql" -ServerInstance "$(labVMFqdn),$(SQL_Port)" -Username "$env:USER_NAME" -Password "$env:PASSWORD"
