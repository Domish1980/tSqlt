# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))(SQL ${{ parameters.SQLVersionEdition }})

trigger: none
pr: none
schedules:
  - cron: 0,15 12 * * mon,tue,wed,fri
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'

parameters:
- name: SQLVersionEdition
  type: string
  default: '2016'
- name: SQLPort
  type: string
  default: '41433'
- name: RequestingBuildId
  type: string
  default: 'NULL'

variables:
  NamePreFix: 'tSQLtCI_'


steps:

- task: CmdLine@2
  condition: false
  inputs:
    script: |
      echo end pipeline here      
      echx

- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    KeyVaultName: 'tSQLtSigningKey'
    SecretsFilter: '*'

## step to decide if a new machine needs to be created

- task: AzurePowerShell@4
  name: CreateVMAndMore
  env:
    USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
    PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
    CONTACT_EMAIL: $(NotificationEmail)
    LABVMSHUTDOWNNOTIFICATIONEMAIL: $(NotificationEmail)
    LABVMSHUTDOWNNOTIFICATIONURL: $(tSQLt-Slack-CI-Pipeline-WebHook)
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)


      Write-Host '==========================================================';
      Write-Host '==========================================================';
      Write-Host 'Executing CreateVM.ps1';
      Write-Host '==========================================================';
      Write-Host '==========================================================';
      $Parameters = @{
        NamePreFix="$(NamePreFix)";
        BuildId="$(Build.BuildId)";
        SQLVersionEdition="${{parameters.SQLVersionEdition}}";
        SQLPort="${{parameters.SQLPort}}";
        LabShutdownNotificationEmail="$env:LABVMSHUTDOWNNOTIFICATIONEMAIL";
        LabShutdownNotificationURL="$env:LABVMSHUTDOWNNOTIFICATIONURL";
        SQLUserName="$env:USER_NAME";
        SQLPassword="$env:PASSWORD";
      }; 
      $DTLDetails = .'CI/CreateVM.ps1' @Parameters

      Write-Host '==========================================================';
      Write-Host '==========================================================';
      Write-Host 'Done: Executing CreateVM.ps1';
      Write-Host '==========================================================';
      Write-Host '==========================================================';

      $DTLRGName = $DTLDetails.DTLRGName;
      $DTLName = $DTLDetails.DTLName;
      Write-Host ("DTLRGName: {0}" -f $DTLRGName)
      Write-Host ("DTLName: {0}" -f $DTLName)

      Write-Host '==========================================================';

      Write-Host "##vso[task.setvariable variable=DTLRGName;]$DTLRGName"
      Write-Host "##vso[task.setvariable variable=DTLName;]$DTLName"

- task: AzurePowerShell@4
  name: UpdateAutoShutdown
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    ScriptType: 'InlineScript'
    Inline: |
      Set-Location $(Build.Repository.LocalPath)
      .("CI/CommonFunctionsAndMethods.ps1")

      $ShutDownTimeUTC = (Get-Date).toUniversalTime().AddHours(2).toString("HH:mm")

      Write-Host 'Update VM AutoShutdown Schedule'
      Set-AZDTLAutoShutdownPolicy -ResourceGroupName "$(DTLRGName)" -LabName "$(DTLName)" -Time ((Get-Date).toUniversalTime().AddMinutes(120)) -Enable
      Write-Host 'Finished Updating VM AutoShutdown Schedule'

      Write-Host 'Tag RG with RequestingBuildId'
      $AddTagsToResourceGroup.Invoke("$(DTLRGName)",@{"LastRequestingBuildId"="${{parameters.RequestingBuildId}}";});
      Write-Host 'Done: Tag RG with RequestingBuildId'

