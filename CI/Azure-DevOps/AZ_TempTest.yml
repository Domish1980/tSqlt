name: $(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger:
- tSQLtFacadeBuild

pr: none
schedules:
  - cron: 0 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true
  - cron: 15 12 24 3 *
    displayName: Scheduled once(ish)
    branches:
      include:
      - CITesting
    always: true

pool:
  vmImage: 'vs2017-win2016'

parameters:
- name: SQLCMDPath
  type: string
  default: 'C:\Program Files\Microsoft SQL Server\110\Tools\Binn'
- name: RequestingBuildId
  type: string
  default: 'NULL'
- name: VMMatrix
  type: object
  default: [{"name":"S3",'SQLVersionEdition':'2016'},{"name":"S4",'SQLVersionEdition':'2017'},{"name":"S5",'SQLVersionEdition':'2019'}]



variables:
  - name: NamePreFix
    value: 'tSQLtCI_DevTestLab_'
  - name: ArtifactBranchName
    value: tSQLt$(Build.SourceVersion)

stages:
- stage: matrixSetup
  jobs:
  - job: generator
    condition: false

    steps:

    # - bash: echo "##vso[task.setVariable variable=legs;isOutput=true]{'a':{'myvar':'A'}, 'b':{'myvar':'B'}}"
    #   name: mtrx
    # This expands to the matrix
    #   a:
    #     myvar: A
    #   b:
    #     myvar: B

    - bash: |
        echo "##vso[task.setVariable variable=legs;isOutput=true]{'SQL2008R2':{'SQLVersionEdition':'2008R2Std'},'SQL2012':{'SQLVersionEdition':'2012Ent'},'SQL2016':{'SQLVersionEdition':'2016'},'SQL2019':{'SQLVersionEdition':'2019'},}"
      name: mtrx

  - job: assignerFromVariables
    strategy:
      matrix: 
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('XXX{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}

    steps:
    - script: echo $(SQLVersionEdition) # echos A or B depending on which leg is running
    
    - script: echo $(Agent.JobName)

    - task: PowerShell@2
      name: assignFQDN
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $fqdn = "fqdn://$(System.JobName)";
          Write-Host ("##vso[task.setVariable variable=fqdn;isOutput=true]"+$fqdn);

  - job: assigner
    dependsOn: generator
    strategy:
      matrix: $[ dependencies.generator.outputs['mtrx.legs'] ]
    steps:
    - script: echo $(SQLVersionEdition) # echos A or B depending on which leg is running
    
    - script: echo $(Agent.JobName)

    - task: PowerShell@2
      name: assignFQDN
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $fqdn = "fqdn://$(System.JobName)";
          Write-Host ("##vso[task.setVariable variable=fqdn;isOutput=true]"+$fqdn);
    
- stage: matrixRead
  condition: false
  dependsOn: matrixSetup
  jobs:
  - job: runner
    variables:
      testVar: $[stageDependencies.matrixSetup.generator.outputs['mtrx.legs']]
      aTestFQDNVar: $[stageDependencies.matrixSetup.assigner.outputs['SQL2008R2.assignFQDN.fqdn']]
      propDerefSyntaxVOutputs: $[convertToJson(stageDependencies.matrixSetup.assigner.outputs)]

      # |  A  |  B  |
      # |  VA |  VB |
      #    |  X  |
      # |  A  |  B  |
      # |  VA |  VB |


    strategy:
      matrix: $[stageDependencies.matrixSetup.generator.outputs['mtrx.legs']]

    steps:
    - task: PowerShell@2
      condition: always()
      name: propertyDereferenceSyntax4
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Write-Host "$(propDerefSyntaxVOutputs)"

    - task: PowerShell@2
      condition: always()
      name: inspectEnv  
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Get-ChildItem Env: | Sort Name;

    - task: PowerShell@2
      name: inspectMatrixEnv
      condition: always()
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Write-Host "$(SQLVersionEdition)";  # echos A or B depending on which leg is running

    - task: PowerShell@2
      condition: always()
      name: readAllFQDN1
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Write-Host "$(System.JobName)";

    - task: PowerShell@2
      condition: always()
      name: readAllFQDN2
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Write-Host "$(testVar)";

    - task: PowerShell@2
      condition: always()
      name: readAllFQDN3
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          Write-Host "$(aTestFQDNVar)";

    - task: PowerShell@2
      condition: always()
      name: pickTheRightFQDN
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $inputObject = @'
          $(propDerefSyntaxVOutputs)
          '@;

          Write-Host "====================================================";
          Write-Host $inputObject;

          $myJsonObject = ConvertFrom-JSON -InputObject $inputObject;

          Write-Host "====================================================";
          Write-Host $myJsonObject;

          $blueString = "SQL2012.assignFQDN.fqdn";

          Write-Host "====================================================";
          Write-Host $myJsonObject.$blueString;

- stage: A
  condition: false
  jobs:
  - job: A1
    steps:
    - checkout: none
    - script: |
        echo "111"
        echo ##vso[task.setvariable variable=shouldrun;isOutput=true]false
        echo "222"
        echo "333"
        echo "done"
      name: printvar
    - script: |
        echo "111"
        echo "222"
        echo "333"
        echo $(printvar.shouldrun)
        echo "done"
      name: something
  - job: A2
    dependsOn: A1
    condition: and(succeeded(), eq(dependencies.A1.outputs['printvar.shouldrun'], 'true'))
    variables:
      xxxx: $[ dependencies.A1.outputs['printvar.shouldrun'] ]
    steps:
    - checkout: none
    - script: |
        echo "111"
        echo "222"
        echo $(xxxx)
        echo "333"
        echo "done"
      name: something2
  

- stage: X
  dependsOn: A
  variables:
    xxxx: $[ stageDependencies.A.A1.outputs['printvar.shouldrun'] ]
  jobs:
  - job: X1
    steps:
    - checkout: none
    - script: |
        echo "111"
        echo "222"
        echo $(xxxx)
        echo "done"

- stage: B
  condition: and(succeeded(), eq(dependencies.A.outputs['A1.printvar.shouldrun'], 'true'))
  dependsOn: A
  jobs:
  - job: B1
    steps:
    - checkout: none
    - script: echo hello from Stage B
  


- stage: stagea
  dependsOn: 
  - B
  - X
  condition: false
#  condition: always()
  jobs:
  - job: joba1
    steps:
    - checkout: none
    - task: CmdLine@2
      name: stepa1a
      inputs:
        script: |
          ECHO ##vso[task.setvariable variable=builtalready;isOutput=true]true
          
- stage: stageb
  dependsOn: stagea
  condition: and(succeeded(), eq(dependencies.stagea.outputs['joba1.stepa1a.builtalready'], 'false'))
  jobs:
  - job: jobb1
    steps:
    - checkout: none
    - task: CmdLine@2
      name: stepb1a
      inputs:
        script: |
          ECHO "stageb.jobb1.stepb1a executed";
          
- stage: stagec
  dependsOn: 
  - stagea
  - stageb
  condition: or(succeeded(), eq(dependencies.stagea.outputs['joba1.stepa1a.builtalready'], 'true'))
  jobs:
  - job: jobc1
    steps:
    - checkout: none
    - task: CmdLine@2
      name: stepc1a
      inputs:
        script: |
          ECHO "stagec.jobc1.stepc1a executed";
        

- stage: StageX
  condition: false
  jobs:
  - job: joba
    condition: false
    
    steps:

    - checkout: self
      clean: true
      fetchDepth: 1
      lfs: false
      path: tSQLt



    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'

    - task: CmdLine@2
      name: AgentInfo
      inputs:
        script: |
          @ECHO ON
          systeminfo
          "${{ parameters.SQLCMDPath }}\SQLCMD" -?
          SET
          ECHO $(Pipeline.Workspace)
          ECHO $(Agent.BuildDirectory)
          dir $(Pipeline.Workspace) /s

    - task: CmdLine@2
      name: GetCommitId
      inputs:
        script: |
          @ECHO ON
          ECHO %BUILD_SOURCEVERSION% >CommitId.txt
          MKDIR $(Pipeline.Workspace)\tmp1
          XCOPY CommitId.txt $(Pipeline.Workspace)\tmp1\

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)\tmp1\'
        artifact: 'tempArtifact'
        publishLocation: 'pipeline'

    - task: DownloadPipelineArtifact@2
      name: DownloadPipelineArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tempArtifact'
        targetPath: '$(Pipeline.Workspace)\tmp2'

       
      
  - job: SetupVM
    variables:
      SQLVersionEdition: 2019
      NamePreFix: 'tSQLtCI_'

    steps:
    - checkout: self
      clean: true
      fetchDepth: $(GitFetchDepth)
      lfs: false

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'

    - task: AzurePowerShell@4
      name: CreateVMAndMore
      env:
        USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
        CONTACT_EMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONEMAIL: $(NotificationEmail)
        LABVMSHUTDOWNNOTIFICATIONURL: $(tSQLt-Slack-CI-Pipeline-WebHook)
        SQLPORTMINIMUM: $(SqlPortMinimum)
        SQLPORTMAXIMUM: $(SqlPortMaximum)
      inputs:
        azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
        azurePowerShellVersion: 'LatestVersion'
        ScriptType: 'InlineScript'
        Inline: |
          Set-Location $(Build.Repository.LocalPath)
          .("Build/CommonFunctionsAndMethods.ps1")

          $SqlPort = Get-Random -minimum $env:SQLPORTMINIMUM -maximum $env:SQLPORTMAXIMUM


          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Executing CreateVMTest1.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          $Parameters = @{
            NamePreFix="$(NamePreFix)";
            BuildId="$(Build.BuildId)";
            SQLVersionEdition="$(SQLVersionEdition)";
            SQLPort="$SqlPort";
            LabShutdownNotificationEmail="$env:LABVMSHUTDOWNNOTIFICATIONEMAIL";
            LabShutdownNotificationURL="$env:LABVMSHUTDOWNNOTIFICATIONURL";
            SQLUserName="$env:USER_NAME";
            SQLPassword="$env:PASSWORD";
          }; 
          $DTLDetails = .'CI/CreateVMTest1.ps1' @Parameters
    
          Log-Output '==========================================================';
          Log-Output '==========================================================';
          Log-Output 'Done: Executing CreateVMTest1.ps1';
          Log-Output '==========================================================';
          Log-Output '==========================================================';
              
          $SerializedDTLDetails=(ConvertTo-JSON -InputObject $DTLDetails -Compress);
          
          $SerializedDTLDetails
          Write-Host "##vso[task.setvariable variable=SerializedDTLDetails;isOutput=true]$SerializedDTLDetails"