#tSQLt CI
name: tSQLt_CI_$(Date:yyyyMMdd)$(Rev:.r)($(Build.BuildId))

trigger: 
- main
pr: none

schedules:
- cron: 0 8 * * *
  displayName: Daily Build of Main Branch
  branches:
    include:
    - main
  always: true

pool:
  vmImage: 'ubuntu-latest'

parameters: # TODO, these don't work for scheduled pipelines, not even the defaults. Fix it. Hint: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/runtime-parameters?view=azure-devops&tabs=script#check-for-an-empty-parameter-object
  - name: VMMatrix
    type: object
    default:
    # - name: SQL2012
    #   SQLVersionEdition: 2012Ent
    # - name: SQL2014
    #   SQLVersionEdition: 2014
    - name: SQL2016
      SQLVersionEdition: 2016
    # - name: SQL2017
    #   SQLVersionEdition: 2017
    # - name: SQL2019
    #   SQLVersionEdition: 2019
    # - name: SQL2022
    #   SQLVersionEdition: 2022
    # - name: SQL2017Linux
    #   SQLVersionEdition: 2017L
    # - name: SQL2019Linux
    #   SQLVersionEdition: 2019L
    # - name: SQL2022Linux
    #   SQLVersionEdition: 2022L
  - name: CreateEnvOnly
    displayName: Create Environment Only
    default: false
    type: boolean
  - name: VMPriority
    displayName: VM Priority
    type: string
    default: Spot
    values:
    - Spot
    - Regular
    - Low

variables:
  - name: ArtifactBranchName
    value: tSQLt-$(Build.SourceVersion)-$(Build.BuildId)
  - name: VMSize
    value: Standard_F4s_v2 #Standard_D2s_v3, Standard_B2s
  - name: VMLocation
    value: 'East US 2'
  - name: NamePreFix
    value: 'tSQLtCI_'
  - name: buildDatabase
    value: 'tSQLtCI'
  - name: TSQLT_REPO_DIR
    value: 'tSQLt'
  - name: ARTIFACT_REPO_DIR
    value: 'tSQLtArtifactRepo'
  - name: CLR_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLtCLR
  - name: TSQLTFILES_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLtBuild/Artifact
  - name: DACPAC_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/DacpacBuild/Artifact
  - name: TSQLT_PUBLIC_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLt/public
  - name: TSQLT_VALIDATION_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLt/validation
  - name: TSQLT_TEST_RESULTS_ARTIFACT_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLt/validation/TestResults
  - name: TSQLT_BUILD_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLtBuild
  - name: TSQLT_TESTS_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/tSQLtTests
  - name: DACPAC_BUILD_DIR
    value: $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)/Build/output/DacpacBuild
#   - name: SQLCMDPath
# #    value: 'C:/Program Files/Microsoft SQL Server/110/Tools/Binn' for vmImage: 'vs2017-win2016'
#     value: 'C:/Program Files/Microsoft SQL Server/Client SDK/ODBC/170/Tools/Binn'
#   - name: SQLPackagePath
# #    value: 'C:/Program Files/Microsoft SQL Server/150/DAC/bin' Updated to the new path on 2022-02-05
#     value: 'C:/Program Files/Microsoft SQL Server/160/DAC/bin'

resources:
  repositories:
  - repository: tSQLtArtifacts
    type: github
    name: tSQLt/tmp6
    endpoint: GitHub-tSQLt-Robot
  
stages:

##########################################################################################################
##         CREATE VMs / Containers                                                                      ##
##########################################################################################################


- stage: Create_Environments
  dependsOn: []    # this removes the implicit dependency on previous stage and causes this to run in parallel
  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: Create
    strategy:
      matrix:
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}
            SQLVersionName: ${{ version.name }}

    steps:
    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI - Main Pipeline - Service Connection'
        KeyVaultName: 'tSQLtSigningKey'
        SecretsFilter: '*'
        RunAsPreJob: false

    - task: PowerShell@2
      name: CreateResourceGroupName
      inputs:
        workingDirectory: "$(Pipeline.Workspace)/$(TSQLT_REPO_DIR)"
        targetType: 'inline'
        script: |
          $cfam = (Join-Path "./Build/" "CommonFunctionsAndMethods.psm1" | Resolve-Path)

          Write-Host "Attempting to load module from: $cfam"
          Import-Module "$cfam" -Force
          Get-Module -Name CommonFunctionsAndMethods  # Verify if module is loaded

          $ResourceGroupName = ("$(NamePreFix)" + (Get-Date).tostring('yyyyMMdd') + "_" + "$(SQLVersionName)" + "_" + "$(Build.BuildId)");
          Log-Output "ResourceGroupName: $ResourceGroupName";
          Write-Host "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$ResourceGroupName";

    - task: AzureCLI@2
      name: CreateSQLVMEnvironment
      env:
        SQL_USER_NAME: $(tSQLt-UserForCIEnvironment-UserName)
        SQL_PASSWORD: $(tSQLt-UserForCIEnvironment-Password)
        CONTACT_EMAIL: $(NotificationEmail)
        VM_USER_NAME: $(tSQLt-AdminForCIVM-UserName)
        VM_PASSWORD: $(tSQLt-AdminForCIVM-Password)
        SQLPORTMINIMUM: $(SqlPortMinimum)
        SQLPORTMAXIMUM: $(SqlPortMaximum)
      inputs:
        azureSubscription: 'tSQLt CI - Main Pipeline - Service Connection'
        azurePowerShellVersion: 'LatestVersion'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Set-Location (Join-Path "$(Pipeline.Workspace)" "$(TSQLT_REPO_DIR)")
          $cfam = (Join-Path "./Build/" "CommonFunctionsAndMethods.psm1" | Resolve-Path)
          Write-Host "Attempting to load module from: $cfam"
          Import-Module "$cfam" -Force
          Get-Module -Name CommonFunctionsAndMethods  # Verify if module is loaded

          $SqlPort = Get-Random -minimum $env:SQLPORTMINIMUM -maximum $env:SQLPORTMAXIMUM
          $SQLUserName = "$env:SQL_USER_NAME";
          $SQLPwd = "$env:SQL_PASSWORD"; #TODO, randomize password, instead of taking it directly from the key vault

          if("$(SQLVersionEdition)" -like "[0-9][0-9][0-9][0-9]L"){
            $SqlPort = 1433;
            $SQLUserName = 'SA'

            Log-Output '==========================================================';
            Log-Output 'Executing CreateSQLContainer.ps1';
            Log-Output '==========================================================';
            $Parameters = @{
              Location="$(VMLocation)";
              # Size="$(VMSize)"
              ResourceGroupName="$(CreateResourceGroupName.ResourceGroupName)";
              BuildId="$(Build.BuildId)";
              SQLVersionEdition="$(SQLVersionEdition)";
              # SQLPort="1433";
              # SQLUserName="SA";
              SQLPwd="$SQLPwd";
              SQLCpu=3;
              SQLMemory=8;
            }; 
            $VMDetails = & 'CI/Azure-DevOps/CreateSQLContainer.ps1' @Parameters
      
            Log-Output '==========================================================';
            Log-Output 'Done: Executing CreateSQLContainer.ps1';
            Log-Output '==========================================================';
          }else{
            Log-Output '==========================================================';
            Log-Output 'Executing CreateSQLVM_azcli.ps1';
            Log-Output '==========================================================';
            $Parameters = @{
              Location="$(VMLocation)";
              Size="$(VMSize)"
              ResourceGroupName="$(CreateResourceGroupName.ResourceGroupName)";
              BuildId="$(Build.BuildId)";
              VMAdminName="$env:VM_USER_NAME";
              VMAdminPwd="$env:VM_PASSWORD";
              SQLVersionEdition="$(SQLVersionEdition)";
              SQLPort="$SqlPort";
              SQLUserName="$SQLUserName";
              SQLPwd="$SQLPwd";
              VMPriority="${{ parameters.VMPriority }}";
            }; 
            $VMDetails = .'CI/Azure-DevOps/CreateSQLVM_azcli.ps1' @Parameters
      
            Log-Output '==========================================================';
            Log-Output 'Done: Executing CreateSQLVM_azcli.ps1';
            Log-Output '==========================================================';
          }              
          # $SerializedVMDetails=(ConvertTo-JSON -InputObject $VMDetails -Compress);
          # $SerializedVMDetails;

          #-----------------------------------------------------------------------#
          # The space below is required to make ANT work. (Not currently in use.) #
          #---------------------------------------|-------------------------------#
          $FQDNAndPort = $VMDetails.SQLVmFQDN + ", " + $VMDetails.SQLVmPort;
          #---------------------------------------|-------------------------------#
          #-----------------------------------------------------------------------#

          $ResourceGroupName = $VMDetails.ResourceGroupName;
          Write-Host "##vso[task.setvariable variable=SQLUserName;isOutput=true]$SQLUserName"
          Write-Host "##vso[task.setvariable variable=SQLPwd;isOutput=true]$SQLPwd"
          Write-Host "##vso[task.setvariable variable=FQDNAndPort;isOutput=true]$FQDNAndPort"
          Write-Host "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$ResourceGroupName";

          # Write-Host "##vso[task.setvariable variable=SerializedVMDetails;isOutput=true]$SerializedVMDetails";


  - job: PrintSQLInfo
    dependsOn: Create
    strategy:
      matrix:
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}
            SQLVersionName: ${{ version.name }}
    variables:
      databaseAccessDetails: $[convertToJson(dependencies.Create.outputs)]        
    steps:
    - checkout: none
    - task: PowerShell@2
      name: PrintSQLInfo
      inputs:
        targetType: 'inline'
        script: |
          $inputObject = @'
          $(databaseAccessDetails)
          '@;
          $myJsonObject = ConvertFrom-JSON -InputObject $inputObject;
          $SQLUserNameKey = "$(System.JobName).CreateSQLVMEnvironment.SQLUserName";
          $SQLPwdKey = "$(System.JobName).CreateSQLVMEnvironment.SQLPwd";
          $FQDNAndPortKey = "$(System.JobName).CreateSQLVMEnvironment.FQDNAndPort";
          $SQLUserName = $myJsonObject.$SQLUserNameKey;
          $SQLPwd = $myJsonObject.$SQLPwdKey;
          $FQDNAndPort = $myJsonObject.$FQDNAndPortKey;

          $DS = Invoke-Sqlcmd -Query "SELECT SUSER_NAME() U,SYSDATETIME() T,@@VERSION V;" -ServerInstance "$FQDNAndPort" -Username "$SQLUserName" -Password "$SQLPwd" -As DataSet -TrustServerCertificate
          $DS.Tables[0].Rows | %{ echo "{ $($_['U']), $($_['T']), $($_['V']) }" } 

          if("${{ parameters.CreateEnvOnly }}" -ieq "true"){
            Write-Host '==========================================================' -ForegroundColor Yellow;
            Write-Host "Name: $(SQLVersionName)";
            Write-Host "FQDN: $FQDNAndPort";
            Write-Host "User: $SQLUserName";
            Write-Host "Pass: $SQLPwd";
            Write-Host '==========================================================' -ForegroundColor Yellow;

            Write-Warning 'This information is now public! Run the following Powershell Statement to change the password immediately!' -ForegroundColor Yellow;

            $Command = '$NewPwd = -join ((33..126) * 3 | Get-Random -Count 12 | % {[char]$_}); Write-Output "New Password: $NewPwd"; Invoke-Sqlcmd -Query "ALTER LOGIN [$($myJsonObject.$SQLUserNameKey)] WITH PASSWORD = ''$NewPwd'' REUSE;" -ServerInstance $myJsonObject.$FQDNAndPortKey -Username $myJsonObject.$SQLUserNameKey -Password $myJsonObject.$SQLPwdKey'
            $EscapedCommand = $Command -replace '"', '""'
            Write-Host '==========================================================' -ForegroundColor Yellow;
            Write-Host $EscapedCommand
            Write-Host '==========================================================' -ForegroundColor Yellow;
            
          }


##########################################################################################################
##         BUILD tSQLt - PART 1                                                                         ##
##########################################################################################################


- stage: Build_tSQLt_Part1
  dependsOn: []    # this removes the implicit dependency on previous stage and causes this to run in parallel
  condition: eq(${{ parameters.CreateEnvOnly }}, false)

  jobs:

  - job: CompileCLR
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2

    # variables:
    #   CertificatePath: '$(Build.Repository.LocalPath)/tsqltclr/OfficialSigningKey/tSQLtOfficialSigningKey.pfx'

    steps:

    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI - Main Pipeline - Service Connection'
        KeyVaultName: 'tSQLtSigningKey'

    - task: PowerShell@2
      name: CompileCLR
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/Build/
        targetType: 'inline'
        script: |

          $pfxSecretBytes = [System.Convert]::FromBase64String('$(tSQLtOfficialSigningKey-Base64)')
          $pfxFilePath = (Join-Path "$(Build.SourcesDirectory)" "/Build/tSQLtOfficialSigningKey.pfx")
          [System.IO.File]::WriteAllBytes($pfxFilePath, $pfxSecretBytes)
          $pfxPassword = (ConvertTo-SecureString -String '$(tSQLtSigningKeyPassword)' -Force -AsPlainText)

          & ./tSQLt_BuildCLR.ps1 -pfxFilePath $pfxFilePath -pfxPassword $pfxPassword

    - task: CopyFiles@2
      displayName: 'Copy all dll files to the ArtifactStagingDirectory'
      inputs:
        SourceFolder: ./Build/output/tSQLtCLR
        Contents: 'tSQLtCLR.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        flattenFolders: true

    - task: PublishPipelineArtifact@1
      name: PublishCLRArtifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/tSQLtCLR.zip'
        artifact: 'tSQLtClrDlls'
        publishLocation: 'pipeline'

  - job: BuildSQLScripts
    timeoutInMinutes: 10
    cancelTimeoutInMinutes: 2
    dependsOn: CompileCLR

    steps:

    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: PowerShell@2
      name: CreateArtifactDir
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/Build/
        targetType: 'inline'
        script: |
          mkdir -p $(CLR_ARTIFACT_DIR)

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtClrDlls'
        itemPattern: '*.zip'
        targetPath: '$(CLR_ARTIFACT_DIR)'

    - task: PowerShell@2
      name: Build_tSQLt
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/Build/
        targetType: 'inline'
        script: |
          & ./tSQLt_Build.ps1

    - task: PowerShell@2
      name: Build_tSQLtTests
      inputs:
        workingDirectory: $(Build.SourcesDirectory)/Build/
        targetType: 'inline'
        script: |
          & ./tSQLt_BuildTests.ps1

    - task: PowerShell@2
      name: CreateArtifact
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |
          $basePath = "$(Build.SourcesDirectory)/Build/output/";
          $artifactPath = '$(TSQLTFILES_ARTIFACT_DIR)';
          New-Item -Path $artifactPath  -ItemType directory -Force
          # $toBeCopied = @("Version.txt", "CommitId.txt", "tSQLt.Private_GetAssemblyKeyBytes.sql", "GetFriendlySQLServerVersion.sql", "CreateBuildLog.sql");
          $artifactFiles = @("Version.txt","CommitId.txt", "tSQLt.Private_GetAssemblyKeyBytes.sql", "GetFriendlySQLServerVersion.sql","CreateBuildLog.sql","tSQLtFiles.zip","tSQLtSnippets(SQLPrompt).zip");
          Get-ChildItem -Path ($basePath + "tSQLtBuild/*")  -Include $artifactFiles | Copy-Item -Destination "$artifactPath";
          $artifactFiles = @("tSQLt.tests.zip");
          Get-ChildItem -Path ($basePath + "tSQLtTests/*")  -Include $artifactFiles | Copy-Item -Destination "$artifactPath";

          Set-Content -Path ($artifactPath+"CommitId.txt") -Value "$(Build.SourceVersion)"

    - task: PublishPipelineArtifact@1
      name: PublishtSQLtFilesArtifact
      inputs:
        targetPath: '$(TSQLTFILES_ARTIFACT_DIR)'
        artifact: 'tSQLtFilesArtifact'
        publishLocation: 'pipeline'


##########################################################################################################
##         BUILD tSQLt - PART 2                                                                         ##
##########################################################################################################


- stage: Build_tSQLt_Part2
  dependsOn:
  - Build_tSQLt_Part1
  - Create_Environments

  jobs:
  - job: Build_Dacpac

    strategy:
      matrix:
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}

    pool:
      vmImage: 'windows-latest'

    variables:
      databaseAccessDetails: $[convertToJson(stageDependencies.Create_Environments.Create.outputs)]
        
    steps:
    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: DownloadPipelineArtifact@2
      name: DownloadtSQLtFilesArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtFilesArtifact'
        targetPath: '$(TSQLTFILES_ARTIFACT_DIR)'

    - task: PowerShell@2
      displayName: 'Install SqlServer Module'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          # Check if the SqlServer module is installed
          $module = "SqlServer"
          if (-not (Get-Module -ListAvailable -Name $module)) {
            # Install the SqlServer module
            Install-Module -Name $module -Scope CurrentUser -Force -AllowClobber
          }
          Import-Module $module


    - task: PowerShell@2
      name: BuildDacpac
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $BuildDir = (Join-Path "$(Pipeline.Workspace)/$(TSQLT_REPO_DIR)" "Build"|Resolve-Path);
          Set-Location $BuildDir;
          . (Join-Path $BuildDir 'SQLServerConnection.ps1');

          $inputObject = @'
          $(databaseAccessDetails)
          '@;

          $myJsonObject = ConvertFrom-JSON -InputObject $inputObject;

          $SQLUserNameKey = "$(System.JobName).CreateSQLVMEnvironment.SQLUserName";
          $SQLPwdKey = "$(System.JobName).CreateSQLVMEnvironment.SQLPwd";
          $FQDNAndPortKey = "$(System.JobName).CreateSQLVMEnvironment.FQDNAndPort";

          $SQLUserName = $myJsonObject.$SQLUserNameKey;
          $SQLPwd = (ConvertTo-SecureString $myJsonObject.$SQLPwdKey -AsPlainText);
          $FQDNAndPort = $myJsonObject.$FQDNAndPortKey;
          $ApplicationName = "$(Build.DefinitionName)-$(Build.BuildId)-$(System.StageName)-$(System.JobId)"
          $DatabaseName = "$(buildDatabase)_dacpac_src"
          $SqlServerConnection = [SqlServerConnection]::new($FQDNAndPort,$SQLUserName,$SQLPwd,$ApplicationName);

          $__ = New-Item -ItemType "directory" -Path "./output/tSQLtTests/"
          # $__ = New-Item -ItemType "directory" -Path "./output/tSQLtBuild/"
          Move-Item (Join-Path '$(TSQLTFILES_ARTIFACT_DIR)' 'tSQLt.tests.zip') "./output/tSQLtTests/"
          Move-Item (Join-Path '$(TSQLTFILES_ARTIFACT_DIR)' 'tSQLtFiles.zip') "./output/tSQLtBuild/"
          & ./tSQLt_BuildDacpac.ps1 -SqlServerConnection $SqlServerConnection -DacPacDatabaseName $DatabaseName

    - task: PublishPipelineArtifact@1
      name: PublishtSQLtDacpacArtifact
      inputs:
        targetPath: '$(DACPAC_BUILD_DIR)'
        artifact: 'tSQLtDacpacArtifact_$(System.JobName)'
        publishLocation: 'pipeline'

  - job: Package_tSQLt_Artifact
    dependsOn: Build_Dacpac

    steps:

    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: DownloadPipelineArtifact@2
      name: DownloadtSQLtFilesArtifact
      inputs:
        buildType: 'current'
        artifactName: 'tSQLtFilesArtifact'
        targetPath: '$(Pipeline.Workspace)/tSQLtArtifactTmp'

    - task: DownloadPipelineArtifact@2
      name: DownloadtSQLtDacpacArtifact
      inputs:
        buildType: 'current'
        patterns: '**/tSQLt*.*.dacpac'
        targetPath: '$(Pipeline.Workspace)/dacpacArtifactTmp'

    - task: PowerShell@2
      name: CopyFilesToOutputDirs
      inputs:
        targetType: 'inline'
        failOnStderr: true
        script: |  
          $__ = New-Item -Path "$(TSQLT_BUILD_DIR)" -ItemType directory -Force;    
          $__ = New-Item -Path "$(TSQLT_TESTS_DIR)" -ItemType directory -Force;    
          $__ = New-Item -Path "$(DACPAC_BUILD_DIR)" -ItemType directory -Force;    

          Get-ChildItem -Path "$(Pipeline.Workspace)/tSQLtArtifactTmp/" -Recurse;

          $files = @(
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/Version.txt",
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/CommitId.txt",
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/CreateBuildLog.sql",
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/GetFriendlySQLServerVersion.sql",
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/tSQLtSnippets(SQLPrompt).zip",
            "$(Pipeline.Workspace)/tSQLtArtifactTmp/tSQLtFiles.zip"
          );
          $files|%{Move-Item $_ "$(TSQLT_BUILD_DIR)"}
          Move-Item (Join-Path '$(Pipeline.Workspace)/tSQLtArtifactTmp' 'tSQLt.tests.zip') "$(TSQLT_TESTS_DIR)"

          Get-ChildItem -Path "$(Pipeline.Workspace)/dacpacArtifactTmp" -Filter *.dacpac -Recurse;
          Get-ChildItem -Path "$(Pipeline.Workspace)/dacpacArtifactTmp" -Filter *.dacpac -Recurse | Copy-Item -Destination "$(DACPAC_BUILD_DIR)"

          Write-Host "CopyFilesToOutputDirs Results:"
          Write-Host "----------------------------------------------------------------"
          Get-ChildItem "$(TSQLT_BUILD_DIR)" -Recurse;
          Write-Host "----------------------------------------------------------------"
          Get-ChildItem "$(TSQLT_TESTS_DIR)" -Recurse;
          Write-Host "----------------------------------------------------------------"
          Get-ChildItem "$(DACPAC_BUILD_DIR)" -Recurse;
          Write-Host "----------------------------------------------------------------"

    - task: PowerShell@2
      name: BuildtSQLtZip
      inputs:
        targetType: 'inline'
        script: |
          Set-Location "$(Pipeline.Workspace)/$(TSQLT_REPO_DIR)";
          ./Build/tSQLt_BuildPackage.ps1
          Get-ChildItem -Path "$(TSQLT_PUBLIC_ARTIFACT_DIR)" -Recurse;
          Get-ChildItem -Path "$(TSQLT_VALIDATION_ARTIFACT_DIR)" -Recurse;

    - checkout: tSQLtArtifacts
      clean: true
      lfs: false
      fetchDepth: 1
      persistCredentials: true
      path: $(ARTIFACT_REPO_DIR)

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'tSQLt CI - Main Pipeline - Service Connection'
        KeyVaultName: 'tSQLtSigningKey'

    - task: PowerShell@2
      name: StoreInArtifactRepo
      env:
        GITHUB_USERNAME: $(GitHubUserName)
        GITHUB_EMAIL: $(GitHubEmail)
      inputs:
        targetType: 'inline'
        failOnStderr: false
        ## git seems to print progress to stderror
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "GIT Failed!"}};          

          Set-Location "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/";
          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)"); 
          try{
            git config --global user.email "$env:GITHUB_EMAIL"
            git config --global user.name "$env:GITHUB_USERNAME"
            git status
            git remote show origin

            Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
            Write-Host "";
            git branch --remotes
            Write-Host "";
            Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";

            git switch -c "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git rm -r *.*
            $CheckIfGitOk.invoke($?);
            New-Item -Path "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/public" -ItemType directory -Force;    
            New-Item -Path "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/validation" -ItemType directory -Force;    

            Copy-Item -Path "$(TSQLT_PUBLIC_ARTIFACT_DIR)/*" -Destination "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/public" -Recurse -Verbose
            Copy-Item -Path "$(TSQLT_VALIDATION_ARTIFACT_DIR)/*" -Destination "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/validation" -Recurse -Verbose

            Get-ChildItem -Path "./public" -Recurse;
            Get-ChildItem -Path "./validation" -Recurse;
            git status

            git add --all
            git status
            $CheckIfGitOk.invoke($?);

            git commit -m "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git push origin "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);
          }catch{
            throw "Git Failed. See prior errors.";
          } 
          git status


##########################################################################################################
##         VALIDATE                                                                                     ##
##########################################################################################################


- stage: Validate
  displayName: ValidateAll
  dependsOn:
  - Build_tSQLt_Part2
  - Create_Environments

  jobs:

  - job: Validate
    strategy:
      matrix:
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}

    variables:
      databaseAccessDetails: $[convertToJson(stageDependencies.Create_Environments.Create.outputs)]        

    steps:
    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - checkout: tSQLtArtifacts
      clean: true
      lfs: false
      fetchDepth: 1
      persistCredentials: true
      path: $(ARTIFACT_REPO_DIR)
  
    - task: PowerShell@2
      name: GetArtifact
      inputs:
        targetType: 'inline'
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]GIT Failed!";throw "GIT Failed!"}};          

          Set-Location "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)";
          $ArtifactTargetPath= '$(TSQLT_PUBLIC_ARTIFACT_DIR)'
          $TestsTargetPath= '$(TSQLT_VALIDATION_ARTIFACT_DIR)'
          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)");

          try{
            git fetch origin $(ArtifactBranchName):$(ArtifactBranchName)
            $CheckIfGitOk.invoke($?);
            git checkout $(ArtifactBranchName)
            $CheckIfGitOk.invoke($?);
          }catch{
            throw "git failed. See prior errors.";
          } 

          New-Item -Path $ArtifactTargetPath  -ItemType directory -Force;
          New-Item -Path $TestsTargetPath  -ItemType directory -Force;
          Copy-Item -Path "./public/*" -Verbose -Destination $ArtifactTargetPath;
          Copy-Item -Path "./validation/*" -Verbose -Destination $TestsTargetPath;
          Get-ChildItem -Path $ArtifactTargetPath -Recurse;
          Get-ChildItem -Path $TestsTargetPath -Recurse;


    - task: PowerShell@2
      displayName: 'Install SqlServer Module'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          # Check if the SqlServer module is installed
          $module = "SqlServer"
          if (-not (Get-Module -ListAvailable -Name $module)) {
            # Install the SqlServer module
            Install-Module -Name $module -Scope CurrentUser -Force -AllowClobber
          }
          Import-Module $module


    - task: PowerShell@2
      name: tSQLtValidateBuild
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $BuildDir = (Join-Path "$(Pipeline.Workspace)/$(TSQLT_REPO_DIR)" "Build"|Resolve-Path);
          Set-Location $BuildDir;
          . (Join-Path $BuildDir 'SQLServerConnection.ps1');

          $inputObject = @'
          $(databaseAccessDetails)
          '@;

          $myJsonObject = ConvertFrom-JSON -InputObject $inputObject;

          $SQLUserNameKey = "$(System.JobName).CreateSQLVMEnvironment.SQLUserName";
          $SQLPwdKey = "$(System.JobName).CreateSQLVMEnvironment.SQLPwd";
          $FQDNAndPortKey = "$(System.JobName).CreateSQLVMEnvironment.FQDNAndPort";

          $SQLUserName = $myJsonObject.$SQLUserNameKey;
          $SQLPwd = (ConvertTo-SecureString $myJsonObject.$SQLPwdKey -AsPlainText);
          $FQDNAndPort = $myJsonObject.$FQDNAndPortKey;
          $ApplicationName = "$(Build.DefinitionName)-$(Build.BuildId)-$(System.StageName)-$(System.JobId)"
          $DatabaseName = "$(buildDatabase)_dacpac_src"
          $SqlServerConnection = [SqlServerConnection]::new($FQDNAndPort,$SQLUserName,$SQLPwd,$ApplicationName);

          $parameters = @{
              SqlServerConnection = $SqlServerConnection
              MainTestDb = 'tSQLt.TmpBuild.ValidateBuild'
              DacpacTestDb = 'tSQLt.TmpBuild.ValidateDacPac'
              ExampleTestDb = 'tSQLt.TmpBuild.ValidateExample'
          }

          & ./tSQLt_Validate.ps1 @parameters

    # - task: CmdLine@2
    #   name: tSQLtValidateBuild
    #   inputs:
    #     script: |
    #       cd /d $(Pipeline.Workspace)/$(TSQLT_REPO_DIR)
    #       ECHO ON
    #       SET SQLInstanceName=$(SetupVariables.FQDNAndPort)
    #       SET DBName=$(buildDatabase)
    #       SET DBLogin=-U $(SetupVariables.SQLUserName) -P $(SetupVariables.SQLPwd)
    #       SET SQLCMDPath=$(SQLCMDPath)
    #       SET SQLPackagePath=$(SQLPackagePath)
    #       echo %SQLInstanceName%
    #       echo %DBName%
    #       echo %SQLCMDPath%
    #       echo %SQLPackagePath%
    #       type %0

    #       Build/LocalValidateBuild.bat "." "." "%SQLCMDPath%" "%SQLInstanceName%" tSQLt_Dev " %DBLogin%" "%SQLPackagePath%" -v || goto :error
    #       :error


    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '$(Pipeline.Workspace)/tSQLt/**/TestResults*.xml' 
        #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        testRunTitle: '$(SQLVersionEdition)' # Optional
        buildPlatform: '$(SQLVersionEdition)' # Optional
        #buildConfiguration: # Optional
        publishRunAttachments: true # Optional

    - task: PublishPipelineArtifact@1
      name: PublishValidateOutputArtifact
      inputs:
        targetPath: '$(Pipeline.Workspace)/tSQLt/Build/output/Validate'
        artifact: 'ValidateOutput_$(System.JobName)'
        publishLocation: 'pipeline'


    - task: PowerShell@2
      name: TagArtifact
      inputs:
        targetType: 'inline'
        script: |
          $CheckIfGitOk = {param($isOk);if(-not $isOk){Write-Host "##vso[task.logissue type=error]git failed!";throw "git failed!"}};    
          
          $TagName = "$(SQLVersionEdition)_$(Build.BuildId)"

          Set-Location "$(Pipeline.Workspace)/$(ARTIFACT_REPO_DIR)/";

          Write-Host ("ArtifactBranchName: {0}" -f "$(ArtifactBranchName)"); 
          try{
            git status
            git remote show origin

            git switch "$(ArtifactBranchName)"
            $CheckIfGitOk.invoke($?);

            git tag -f $TagName;
            $CheckIfGitOk.invoke($?);

            git push --tags
            $CheckIfGitOk.invoke($?);

            git status
          }catch{
            throw "git failed. See prior errors.";
          }  


##########################################################################################################
##         DELETE RESOURCES                                                                             ##
##########################################################################################################


- stage: Delete_Resources
  displayName: Delete Pipeline Resources
  dependsOn:
  - Create_Environments
  - Validate

  condition: not(and(eq(${{ parameters.CreateEnvOnly }}, true), eq(stageDependencies.Create_Environments.PrintSQLInfo.result, 'Succeeded')))

  pool:
    vmImage: 'windows-latest'

  jobs:

  - job: Delete_VM

    strategy:
      matrix:
        ${{ each version in parameters.VMMatrix }}:
          ${{ format('{0}', version.name) }}:
            SQLVersionEdition: ${{ version.SQLVersionEdition }}

    variables:
      databaseAccessDetails: $[convertToJson(stageDependencies.Create_Environments.Create.outputs)]
        
    steps:
    - checkout: self
      clean: true
      lfs: false
      path: $(TSQLT_REPO_DIR)

    - task: AzureCLI@2
      name: DeleteAzureVM
      inputs:
        azureSubscription: 'tSQLt CI - Main Pipeline - Service Connection'
        azurePowerShellVersion: 'LatestVersion'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Set-Location (Join-Path "$(Pipeline.Workspace)" "$(TSQLT_REPO_DIR)")
          $cfam = (Join-Path "./Build/" "CommonFunctionsAndMethods.psm1" | Resolve-Path)
          Write-Host "Attempting to load module from: $cfam"
          Import-Module "$cfam" -Force
          Get-Module -Name CommonFunctionsAndMethods  # Verify if module is loaded

          $inputObject = @'
          $(databaseAccessDetails)
          '@;
          $myJsonObject = ConvertFrom-JSON -InputObject $inputObject;
          $ResourceGroupNameKey = "$(System.JobName).CreateResourceGroupName.ResourceGroupName";
          $ResourceGroupName = $myJsonObject.$ResourceGroupNameKey;          
        
          $ResourceGroupName | Log-Output;
          az group delete --name $ResourceGroupName --yes
