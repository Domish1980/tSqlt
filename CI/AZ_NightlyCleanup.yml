# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

schedules:
  - cron: 0 16 * * *
    displayName: Scheduled NOON cleanup #Remove When Finished#
    branches:
      include:
      - CITesting
    always: true
  - cron: "0 6 * * *"
    displayName: Nightly cleanup
    branches:
     include:
      - CITesting
    always: true
  - cron: "0 8 * * *"
    displayName: Nightly +2h cleanup
    branches:
      include:
      - CITesting
    always: true

variables:
  GetResourceGroupsStatement: 'Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"}'


steps:

- task: AzureCLI@2
  condition: false
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host '-----------------------------'
      Write-Host 'List RGs to be deleted'
      Write-Host '-----------------------------'
      $RGTBD = @(Get-AzResourceGroup) | Where-Object {$_.Tags.Ephemeral -eq "True" -and $_.Tags.Department -eq "tSQLtCI"} 
      $RGTBD | ForEach-Object { 
        ##add pipline status check here
        Write-Host $_.ResourceGroupName 
        Get-AzResource -ResourceGroup $_.ResourceGroupName |ForEach{(Get-AzResourceLock -ResourceType $_.ResourceType -ResourceName $_.Name -ResourceGroupName $_.ResourceGroupName)|ForEach-Object{Write-Host $_.ResourceId}}
        ##copy valid ones to new array
        ##then publish that array below instead of $RGTBD
        ##finally remove the following task and enable this one
      }
      Write-Host '-----------------------------'
      Write-Host 'Sleeping for 15 seconds'
      #Start-Sleep -s 15
      Write-Host '-----------------------------'
      Write-Host 'Setting Variable'
      $SerializedListOfRGs=(ConvertTo-JSON -InputObject $RGTBD -Compress)
      Write-Host "##vso[task.setvariable variable=SerializedListOfRGs]$SerializedListOfRGs"
      Write-Host 'Setting Variable Done'


- task: AzurePowerShell@4
  name: List_RGs_To_Be_Deleted
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    failOnStandardError: True
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host '-----------------------------'
      Write-Host 'List RGs to be deleted'
      Write-Host '-----------------------------'
      $RGTBD = @(Get-AzResourceGroup) | Where-Object {$_.Tags.Ephemeral -eq "True" -and $_.Tags.Department -eq "tSQLtCI"} 
      $RGTBD | ForEach-Object { 
        Write-Host $_.ResourceGroupName 
        Get-AzResource -ResourceGroup $_.ResourceGroupName |ForEach{(Get-AzResourceLock -ResourceType $_.ResourceType -ResourceName $_.Name -ResourceGroupName $_.ResourceGroupName)|ForEach-Object{Write-Host $_.ResourceId}}
      }
      Write-Host '-----------------------------'
      Write-Host 'Sleeping for 15 seconds'
      #Start-Sleep -s 15
      Write-Host '-----------------------------'
      Write-Host 'Setting Variable'
      $SerializedListOfRGs=(ConvertTo-JSON -InputObject $RGTBD -Compress)
      Write-Host "##vso[task.setvariable variable=SerializedListOfRGs]$SerializedListOfRGs"
      Write-Host 'Setting Variable Done'

- task: AzurePowerShell@4
  name: print_stuff
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    failOnStandardError: True
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host '----->' $env:SerializedListOfRGs '<-----'
      $RGTBD = (ConvertFrom-JSON $env:SerializedListOfRGs)
      $RGTBD | FT
      Write-Host '-----> List of Running Cleanup Builds <-----'
      #az pipelines runs list --org "https://sqlity.visualstudio.com/" --project "tSQLt CI"



- task: AzurePowerShell@4
  #condition: false
  name: Delete_RGs
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    FailOnStandardError: true
    ScriptType: 'InlineScript'
    Inline: |
      $RemoveResourceGroup = {
            param($OrgRGN)
            Write-Output ("[{0}]Start processing delete for {1}" -f ((get-date).toString("O")), ($OrgRGN))
            $MyRG = @(Get-AzResourceGroup) | Where-Object {$_.ResourceGroupName -eq "$OrgRGN" -and $_.Tags.Ephemeral -eq "True" -and $_.Tags.Department -eq "tSQLtCI"} 
            if("RemovalBy" -in $MyRG.Tags.Keys)
            {
              $MyRG = $null;
            }
            if($MyRG -ne $null)
            {
              $Tags = @{};
              Write-Output ("Add Tag to {0}" -f $OrgRGN);
              $Tags = $MyRG.Tags
              $Tags += @{"RemovalBy"="$(Build.BuildId)"}
              $MyRG|Set-AzResourceGroup -Tags $Tags
              Start-Sleep 10
              Write-Output ("Confirming Tags are still in place for {0}" -f $OrgRGN)
              $MyRG = $MyRG|Get-AZResourceGroup| Where-Object {$_.Tags.RemovalBy -eq "$(Build.BuildId)"}
              $MyRG.Tags|FT
              if($MyRG -ne $null)
              {
                Write-Output "Removing Locks"
                Get-AzResource -ResourceGroupName $MyRG.ResourceGroupName |ForEach{
                  Get-AzResourceLock -ResourceType $_.ResourceType -ResourceName $_.Name -ResourceGroupName $_.ResourceGroupName|ForEach{
                    Write-Output ("{0} -> {1}" -f $_.ResourceType, $_.ResourceName);
                    $_ | Remove-AzResourceLock -Force 
                  }
                }
                Write-Output ("Removing RG {0}" -f $OrgRGN);
                $MyRG | Remove-AzResourceGroup -Force 
              }
              else
              {
                Write-Output "Tags where changed by other thread"
              }
            }        
            else
            {
              Write-Output "processing skipped"
            }
            Write-Output ("[{0}]Done processing delete for {1}" -f ((get-date).toString("O")), ($OrgRGN))
      }
      $ThreadHash = @{};
      $RunspacePool = [runspacefactory]::CreateRunspacePool(1,30)
      $RunspacePool.open()
      (ConvertFrom-JSON $env:SerializedListOfRGs) | ForEach-Object { 
          Write-Output ("Deleting ResourceGroup {0}" -f $_.ResourceGroupName)
          if($_.ResourceGroupName -ne $null)
          {
            Write-Host ("BeginInvoke RemoveResourceGroup({0})" -f $_.ResourceGroupName);
            $PSInstance = [powershell]::Create().AddScript($RemoveResourceGroup).AddArgument($_.ResourceGroupName);
            $PSinstance.RunspacePool = $RunspacePool;
            $Handle = $PSInstance.BeginInvoke();
            $ThreadHash.Add($_.ResourceGroupName,@{PSInstance=$PSInstance;Handle=$Handle})
          }else{
            Write-Output "Skipped...";
          }
          Write-Output "Done BeginThreading";
      }
      $ThreadHash.GetEnumerator() | ForEach-Object{
          Write-Host ("EndInvoke RemoveResourceGroup({0}" -f $_.Key);
          $PsInstance = $_.Value.PsInstance;
          $PSInstance.EndInvoke($_.Value.Handle);
          $PSInstance.Streams;
          Write-Output ("Done RemoveResourceGroup({0})" -f $_.Key);
      }
      #Start-Job -InputObject $_ -ScriptBlock { } 
      #Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"} | ForEach-Object { $_ | Remove-AzResourceGroup -Force } 
