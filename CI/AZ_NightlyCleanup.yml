# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

schedules:
  - cron: 0 16 * * *
    displayName: Scheduled NOON cleanup #Remove When Finished#
    branches:
      include:
      - CITesting
    always: true
  - cron: "0 6 * * *"
    displayName: Nightly cleanup
    branches:
     include:
      - CITesting
    always: true
  - cron: "0 8 * * *"
    displayName: Nightly +2h cleanup
    branches:
      include:
      - CITesting
    always: true

variables:
  GetResourceGroupsStatement: 'Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"}'


steps:

- task: AzurePowerShell@4
  name: List_RGs_To_Be_Deleted
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    failOnStandardError: True
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host '-----------------------------'
      Write-Host 'List RGs to be deleted'
      Write-Host '-----------------------------'
      $RGTBD = @(Get-AzResourceGroup) | Where-Object {$_.Tags.Ephemeral -eq "True" -and $_.Tags.Department -eq "tSQLtCI"} 
      $RGTBD | ForEach-Object { 
        Write-Host $_.ResourceGroupName 
        Get-AzResource -ResourceGroup $_.ResourceGroupName |ForEach{(Get-AzResourceLock -ResourceType $_.ResourceType -ResourceName $_.Name -ResourceGroupName $_.ResourceGroupName)|ForEach-Object{Write-Host $_.ResourceId}}
      }
      Write-Host '-----------------------------'
      Write-Host 'Sleeping for 15 seconds'
      #Start-Sleep -s 15
      Write-Host '-----------------------------'
      Write-Host 'Setting Variable'
      $SerializedListOfRGs=(ConvertTo-JSON -InputObject $RGTBD -Compress)
      Write-Host "##vso[task.setvariable variable=SerializedListOfRGs]$SerializedListOfRGs"
      Write-Host 'Setting Variable Done'

- task: AzurePowerShell@4
  name: print_stuff
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    failOnStandardError: True
    ScriptType: 'InlineScript'
    Inline: |
      Write-Host '----->' $env:SerializedListOfRGs '<-----'
      $RGTBD = (ConvertFrom-JSON $env:SerializedListOfRGs)
      $RGTBD | FT
      Write-Host '-----> List of Running Cleanup Builds <-----'
      #az pipelines runs list --org "https://sqlity.visualstudio.com/" --project "tSQLt CI"



- task: AzurePowerShell@4
  #condition: false
  name: Delete_RGs
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    azurePowerShellVersion: 'LatestVersion'
    FailOnStandardError: true
    ScriptType: 'InlineScript'
    Inline: |
      $RemoveResourceGroup = {
            param($OrgRGN)
            Write-Host "Add Tag to "$OrgRGN
            $MyRG = @(Get-AzResourceGroup) | Where-Object {$_.ResourceGroupName -eq "$OrgRGN" -and $_.Tags.Ephemeral -eq "True" -and $_.Tags.Department -eq "tSQLtCI" -and ([string]::isnullorempty($_.Tags.RemovalBy))} 
            if($MyRG -ne $null)
            {
              $Tags = $MyRG.Tags
              $Tags += @{"RemovalBy"="$(Build.BuildId)"}
              $MyRG|Set-AzResourceGroup -Tags $Tags
              Start-Sleep 10
              $MyRG = $MyRG|Get-AZResourceGroup| Where-Object {$_.Tags.RemovalBy -eq "$(Build.BuildId)"}
              $MyRG.Tags
              if($MyRG -ne $null)
              {
                Write-Host "Removing Locks"
                Get-AzResource -ResourceGroupName $MyRG.ResourceGroupName |ForEach{
                  Get-AzResourceLock -ResourceType $_.ResourceType -ResourceName $_.Name -ResourceGroupName $_.ResourceGroupName|ForEach{
                    Write-Host $_.ResourceType "->" $_.ResourceName
                    $_ | Remove-AzResourceLock -Force 
                  }
                }
                Write-Host "Removing RG";
                $MyRG | Remove-AzResourceGroup -Force 
              }
            }        
      }
      (ConvertFrom-JSON $env:SerializedListOfRGs) | ForEach-Object { 
          Write-Host "Deleting ResourceGroup:" $_.ResourceGroupName 
          if($_.ResourceGroupName -ne $null)
          {
            Write-Host "BeginInvoke RemoveResourceGroup("$_.ResourceGroupName")";
            $PSInstance = [powershell]::Create().AddScript($RemoveResourceGroup).AddArgument($_.ResourceGroupName);
            $Handle = $PSInstance.BeginInvoke();

            Write-Host "EndInvoke RemoveResourceGroup("$_.ResourceGroupName")";
            $PSInstance.EndInvoke($Handle);
            $PSInstance.Streams;
            Write-Host "Done RemoveResourceGroup("$_.ResourceGroupName")";
          }else{
            Write-Host "Skipped...";
          }
          Write-Host "Done" ;
      }
      #Start-Job -InputObject $_ -ScriptBlock { } 
      #Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"} | ForEach-Object { $_ | Remove-AzResourceGroup -Force } 
