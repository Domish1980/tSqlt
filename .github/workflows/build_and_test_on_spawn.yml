# Builds and tests a database project (in this case tSQLt) 
# 
# Originally from: https://github.com/lizbaron/db-cicd-with-github-actions/blob/9a514ed0c41029daa231db22e30de7806636160c/.github/workflows/build_and_test_on_linux.yml

name: Build and Test tSQLt on Spawn

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch: 
    inputs:
      spawnDataImages:
        description: 'names of the data-images on spawn (e.g. all is currently equivalent to [["SQL2017","mssql-empty:v2017"],["SQL2019","mssql-empty:v2019"]] 2021-09-26)'
        required: true
        default: 'all'

env:
  MATRIX_NAME: 0
  MATRIX_SPAWNIMAGE: 1
  SPAWNDATAIMAGES_DEFAULT: 
    '[["SQL2017","mssql-empty:v2017"],["SQL2019","mssql-empty:v2019"]]'

jobs:
# ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–   
  set-up-env-vars:
    name: set up matrix variables
    #if: ${{ always() }}

    # More types found here, https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
    runs-on: windows-latest

    env:
      TSQLT_ARTIFACT_DIR: ${{ github.workspace }}\tSQLt\Build\output\tSQLt

    steps:

      - name: create variables
        id: create-vars
        shell: pwsh
        run: |
          $spawnDataImages = '${{ github.event.inputs.spawnDataImages }}';
          Write-Host "âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   ";
          Write-Host "";
          Write-Host ("input spawnDataImages: {0}" -f $spawnDataImages);
          if ([string]::IsNullOrEmpty($spawnDataImages) -or ("all" -eq $spawnDataImages)) {
            $spawnDataImages = '${{ env.spawndataimages_default }}';
          }
          Write-Host ("final spawnDataImages value: {0}" -f $spawnDataImages);
          $matrixValues = '{{"data-image":{0} }}' -f $spawnDataImages;
          Write-Host ("matrixValues value: {0}" -f $matrixValues);
          Write-Host "";
          Write-Host "âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   ";

          Write-Host ('::set-output name=matrixValues::' + $matrixValues);

    outputs:
      matrixValues: ${{ steps.create-vars.outputs.matrixValues }}


# ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–   
  build-tSQLt:
    name: build tSQLt
    #if: ${{ false }}

    runs-on: windows-latest

    env:
      PFX_PATH: ${{ github.workspace }}\tSQLt\Build\tSQLtOfficialSigningKey.pfx
      PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
      ARTIFACT_DIR: ${{ github.workspace }}\artifacts
      MSBUILD_HOME: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it. 
      # But this is misleading, because this variable is only really helpful as ${{ github.workspace }}
      - name: Checkout tSQLt
        uses: actions/checkout@v2
        with:
          path: tSQLt

      # documentation: This is just what you need to do...
      - name: create and install unofficial pfx file for signing dlls
        shell: pwsh
        run: |
          Write-Host "$env:PFX_PASSWORD"
          $cert = New-SelfSignedCertificate -FriendlyName "tSQLt_testKey" -Type CodeSigningCert -Subject "CN=localhost" -KeyAlgorithm RSA -HashAlgorithm SHA1 -KeyLength 2048 -SmimeCapabilities -CertStoreLocation "cert:/LocalMachine" -Provider "Microsoft Strong Cryptographic Provider"
          $pwd = ConvertTo-SecureString -String "$env:PFX_PASSWORD" -Force -AsPlainText
          $pfxFile = Export-PfxCertificate -cert ("Cert:\LocalMachine\My\" + $cert.thumbprint) -FilePath $env:PFX_PATH -Password $pwd
          &"${{ github.workspace }}\tSQLt\Build\SnInstallPfx" "$env:PFX_PATH" "$env:PFX_PASSWORD" tSQLt_OfficialSigningKey

