<?xml version="1.0"?>
<project name="tSQLt" default="all" basedir=".">
 <description>Build tSQLt</description>

 <target name="validate.parameters" description="">
  <!-- no parameters at this point-->
 </target>

 <target
   name="all"
   depends="clean, validate.parameters, package.create.tSQLt, package.create.SQLPromptSnippets, package.create.tSQLtFacade, package.create.tSQLt.tests, print.version"
   />

 <target
   name="package.create.tSQLt"
   depends="init, init.tSQLtCLR, package.copy.files, package.create.tSQLtDrop, package.construct.tsqlt, package.set.build.version, package.create.PrepareServer, package.create.example, exec.powershell.build"
   />

 <target
  name="package.create.tSQLt.tests"
  depends="init, init.tSQLt.tests, package.test.files, package.create.ResetValidationServer, package.test.create.artifacts"
   />

 <target
   name="package.create.SQLPromptSnippets"
   depends="init, init.SQLPromptSnippets, package.SQLPromptSnippets.copy, package.SQLPromptSnippets.create.artifacts"
   />

 <!--=======================================================================-->
 <!--========                 Misc                                 =========-->
 <!--=======================================================================-->

 <target name="diagnostics" description="diagnostics">
  <diagnostics/>
 </target>
 
 <target name="clean" description="prepare directories">
  <delete dir="temp/tSQLtBuild/"/>
  <delete dir="output/tSQLtBuild/"/>
 </target> 

 <target name="init" description="prepare directories">
  <mkdir dir="output/tSQLtBuild/" />
  <mkdir dir="temp/tSQLtBuild"/>
  <antcall target="diagnostics" ></antcall>
 </target>

 <target name="validate.parameter">
  <fail message="Parameter '${parameter.name}' is required">
   <condition>
    <not>
     <and>
      <isset property="${parameter.name}"/>
     </and>
    </not>
   </condition>
  </fail>
 </target>

 <target name="init.tSQLtCLR" description="open tSQLtCLR artifact">
  <echo message="Start: Unzip *.dll from tSQLtCLR.zip" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c" />
   <arg value="dir output /S" />
  </exec>
  <unzip src="${basedir}/output/CLRBuild/tSQLtCLR.zip" dest="${basedir}/temp/tSQLtBuild/tSQLtCLR"/>
 
  <copy todir="${basedir}/temp/tSQLtBuild/tSQLtCLR/" flatten="true" preservelastmodified="true" verbose="true" force="true">
   <!-- Fixing odd unzip dir behaviour in Azure DevOps  -->
   <fileset dir="${basedir}/temp/tSQLtBuild/tSQLtCLR/tSQLtCLR/" erroronmissingdir="false">
    <patternset>
     <include name="*.dll"/>
    </patternset>
   </fileset>
  </copy>
 
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c" />
   <arg value="dir output /S" />
  </exec>
  <echo message="Finished: Unzip *.dll from tSQLtCLR.zip" />

  <echo message="Read Version from tSQLtCLR.dll" />
  <exec executable="cmd" dir="." failonerror="true" output="temp/tSQLtBuild/Version.txt">
   <arg value="/c"/>
   <arg value="cscript //nologo VersionInfo.vbs temp/tSQLtBuild/tSQLtCLR/tSQLtCLR.dll"/>
  </exec>

  <echo message="Parse Version from tSQLtCLR.dll" />
  <loadfile srcFile="temp/tSQLtBuild/Version.txt" property="clr.version" failonerror="true">
   <filterchain>
    <striplinebreaks />
    <tokenfilter>
     <deletecharacters chars="\t" />
     <trim />
     <ignoreblank />
    </tokenfilter>
   </filterchain>
  </loadfile>

  <echo message="CLR Version is: [V${clr.version}]"/>
 </target>

 <target name="print.version" description="misc print.version tasks">
  <echo message="##BUILD[buildNumber 'V${clr.version}']" />
 </target>

 <!--=======================================================================-->
 <!--========                 Build tSQLt.zip                      =========-->
 <!--=======================================================================-->
 
 <target name="package.copy.files">
  <copy file="../Source/SetClrEnabled.sql" todir="temp/tSQLtBuild"/>
  <copy file="ReleaseNotes.txt" todir="temp/tSQLtBuild"/>
  <copy file="License.txt" todir="temp/tSQLtBuild"/>
 </target>

 <target name="package.construct.tsqlt">
  <echo message="Generating CREATE ASSEMBLY statement."/>
  <exec executable="cmd" dir="." failonerror="true" output="temp/tSQLtBuild/CreateAssembly.sql">
   <arg value="/c"/>
   <arg value="CreateAssemblyGenerator.exe temp/tSQLtBuild/tSQLtCLR/tSQLtCLR.dll ../Source/tSQLtCLR.mdl.sql 0x000000 &quot;&quot; 200 &quot;'+\n'&quot;"/>
  </exec>
  <exec executable="cmd" dir="." failonerror="true" >
   <arg value="/c"/>
   <arg value="type temp\tSQLtBuild\CreateAssembly.sql"/>
  </exec>

  <echo message="Generating GetAssemblyKeyBytes function."/>
  <exec executable="cmd" dir="." failonerror="true" output="temp/tSQLtBuild/tSQLt.Private_GetAssemblyKeyBytes.sql">
   <arg value="/c"/>
   <arg value="CreateAssemblyGenerator.exe temp/tSQLtBuild/tSQLtCLR/tSQLtAssemblyKey.dll ../Source/tSQLt.Private_GetAssemblyKeyBytes.mdl.sql 0x000000 0x000001 200 &quot;+\n0x&quot;"/>
  </exec>
  <exec executable="cmd" dir="." failonerror="true" >
   <arg value="/c"/>
   <arg value="type temp\tSQLtBuild\tSQLt.Private_GetAssemblyKeyBytes.sql"/>
  </exec>

  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Source/BuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/tSQLt.class.sql"/>
   <arg value="---Build"/>
  </exec>
 </target>

 <target name="replace.in.file">
  <echo message="File: ${replace.file}" />
  <echo message="Token: ${replace.token}" />
  <echo message="Value: ${replace.value}" />
  <move file="${replace.file}" tofile="${replace.file}.replacement.temp">
   <filterchain>
    <replacestring from="${replace.token}" to="${replace.value}" />
    <tabstospaces tablength="1"/>
   </filterchain>
  </move>
  <move file="${replace.file}.replacement.temp" tofile="${replace.file}" />
 </target>

 <target name="package.set.build.version">
  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/ReleaseNotes.txt" />
   <param name="replace.token" value="LATEST-BUILD-NUMBER" />
   <param name="replace.value" value="${clr.version}" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/tSQLt.class.sql" />
   <param name="replace.token" value="$LATEST-BUILD-NUMBER$" />
   <param name="replace.value" value="${clr.version}" />
  </antcall>

 </target>

 <target name="package.create.PrepareServer">
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Source/PrepareServerBuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/PrepareServer.sql"/>
  </exec>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/PrepareServer.sql" />
   <param name="replace.token" value="tSQLt." />
   <param name="replace.value" value="#" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/PrepareServer.sql" />
   <param name="replace.token" value="OBJECT_ID('#" />
   <param name="replace.value" value="OBJECT_ID('tempdb..#" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/PrepareServer.sql" />
   <param name="replace.token" value="---Build-" />
   <param name="replace.value" value="" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/PrepareServer.sql" />
   <param name="replace.token" value="---Build+" />
   <param name="replace.value" value="" />
  </antcall>

  <replaceregexp match="^(?:[\t ]*(?:\r?\n|\r))+" replace="" flags="gm" byline="false" file="temp/tSQLtBuild/PrepareServer.sql" />
  <replaceregexp match="^\s*GO\s*((\r?\n)\s*GO\s*)+$" replace="GO" flags="gm" byline="false" file="temp/tSQLtBuild/PrepareServer.sql" />

 </target>

 <target name="package.create.tSQLtDrop">

  <echo message="Starting package.create.tSQLtDrop {===" />

  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Source/tSQLtDropBuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/TempDropClass.sql"/>
   <arg value="---Build"/>
  </exec>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/TempDropClass.sql" />
   <param name="replace.token" value="tSQLt." />
   <param name="replace.value" value="#" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/TempDropClass.sql" />
   <param name="replace.token" value="OBJECT_ID('#" />
   <param name="replace.value" value="OBJECT_ID('tempdb..#" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/TempDropClass.sql" />
   <param name="replace.token" value="---Build-" />
   <param name="replace.value" value="" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/TempDropClass.sql" />
   <param name="replace.token" value="---Build+" />
   <param name="replace.value" value="" />
  </antcall>

  <replaceregexp match="^(?:[\t ]*(?:\r?\n|\r))+" replace="" flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />
  <replaceregexp match="^\s*GO\s*((\r?\n)\s*GO\s*)+$" replace="GO" flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />
  <replaceregexp match="(\r?\n)" replace=" " flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />
  <replaceregexp match="\s+" replace=" " flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />
  <replaceregexp match="GO\s*$" replace="" flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />
  <replaceregexp match="^.*?BEGIN" replace="---Build+${line.separator}DECLARE @ClassName NVARCHAR(MAX) ='tSQLt';BEGIN" flags="gm" byline="false" file="temp/tSQLtBuild/TempDropClass.sql" />

  <echo message="Starting package.create.tSQLtDrop {===" />

 </target>


 <target name="append.file" description="append one sql file to another">
  <echo message="append:${append.source}" />
  <loadfile srcfile="${append.source}" property="append.file.content" />
  <echo message="${append.file.content}" file="${append.target}" append="true"/>
  <echo message="${line.separator}${line.separator}GO${line.separator}${line.separator}" file="${append.target}" append="true" />
 </target>

 <target name="package.create.ResetValidationServer">
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Source/ResetValidationServerBuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/ResetValidationServer.sql"/>
  </exec>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/ResetValidationServer.sql" />
   <param name="replace.token" value="tSQLt." />
   <param name="replace.value" value="#" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/ResetValidationServer.sql" />
   <param name="replace.token" value="OBJECT_ID('#" />
   <param name="replace.value" value="OBJECT_ID('tempdb..#" />
  </antcall>

  <antcall target="append.file">
   <param name="append.target" value="temp/tSQLtBuild/ResetValidationServer.sql" />
   <param name="append.source" value="CreateLogin(tSQLt.Build).sql" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/ResetValidationServer.sql" />
   <param name="replace.token" value="---Build-" />
   <param name="replace.value" value="" />
  </antcall>

  <antcall target="replace.in.file">
   <param name="replace.file" value="temp/tSQLtBuild/ResetValidationServer.sql" />
   <param name="replace.token" value="---Build+" />
   <param name="replace.value" value="" />
  </antcall>

  <replaceregexp match="^(?:[\t ]*(?:\r?\n|\r))+" replace="" flags="gm" byline="false" file="temp/tSQLtBuild/ResetValidationServer.sql" />
  <replaceregexp match="^\s*GO\s*((\r?\n)\s*GO\s*)+$" replace="GO" flags="gm" byline="false" file="temp/tSQLtBuild/ResetValidationServer.sql" />

 </target>

 <target name="package.create.example">
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Examples/BuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/Example.sql"/>
  </exec>
 </target>

 <!--=======================================================================-->
 <!--========    Powershell currently creates tSQLt.zip            =========-->
 <!--=======================================================================-->

 <target name="exec.powershell.build">
  <exec dir="." executable="powershell" timeout="5000" failonerror="true">
      <arg line="-ExecutionPolicy bypass" />
      <arg line="-File Build.ps1" />
  </exec>
 </target>

 <!--=======================================================================-->
 <!--========                 Build tSQLt Tests                    =========-->
 <!--=======================================================================-->

 <target name="init.tSQLt.tests" description="prepare directories for tSQLt build">
  <mkdir dir="temp/tSQLtBuild/Tests"/>
 </target>

 <target name="package.test.files">
  <echo message="scripting tSQLtTestUtilCLR.dll" />
  <exec executable="cmd" dir="." failonerror="true" output="temp/tSQLtBuild/Tests/CreateTestUtilAssembly.sql">
   <arg value="/c"/>
   <arg value="CreateAssemblyGenerator.exe temp/tSQLtBuild/tSQLtCLR/tSQLtTestUtilCLR.dll ../TestUtil/tSQLtTestUtilCLR.mdl.sql 0x000000"/>
  </exec>

  <echo message="scripting UnsignedEmpty.dll" />
  <exec executable="cmd" dir="." failonerror="true" output="temp/tSQLtBuild/Tests/GetUnsignedEmptyBytes.sql">
   <arg value="/c"/>
   <arg value="CreateAssemblyGenerator.exe temp/tSQLtBuild/tSQLtCLR/UnsignedEmpty.dll ../TestUtil/GetUnsignedEmptyBytes.mdl.sql 0x000000"/>
  </exec>

  <echo message="Building TestUtil.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../TestUtil/BuildOrder.txt"/>
   <arg value="temp/tSQLtBuild/Tests/TestUtil.sql"/>
  </exec>

  <echo message="Building TestUtilTests.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../TestUtilTests/*.class.sql"/>
   <arg value="temp/tSQLtBuild/Tests/TestUtilTests.sql"/>
  </exec>

  <echo message="Building AllTests.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Tests/*.class.sql"/>
   <arg value="temp/tSQLtBuild/Tests/AllTests.sql"/>
  </exec>

  <echo message="Building AllTests.EXTERNAL_ACCESS.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Tests.EXTERNAL_ACCESS/*.class.sql"/>
   <arg value="temp/tSQLtBuild/Tests/AllTests.EXTERNAL_ACCESS.sql"/>
  </exec>

  <echo message="Building AllTests.EXTERNAL_ACCESS_KEY_EXISTS.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Tests.EXTERNAL_ACCESS_KEY_EXISTS/*.class.sql"/>
   <arg value="temp/tSQLtBuild/Tests/AllTests.EXTERNAL_ACCESS_KEY_EXISTS.sql"/>
  </exec>

  <echo message="Building AllTests.SA.sql" />
  <exec executable="cmd" dir="." failonerror="true">
   <arg value="/c"/>
   <arg value="BuildHelper.exe"/>
   <arg value="../Tests.SA/*.class.sql"/>
   <arg value="temp/tSQLtBuild/Tests/AllTests.SA.sql"/>
  </exec>

  <echo message="Copying misc SQL files" />
  <copy file="../Tests/BootStrapTest.sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="ExecuteAs(tSQLt.Build).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="ExecuteAs(tSQLt.Build.SA).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="Drop(tSQLtAssemblyKey)(Pre2017).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="Install(tSQLtAssemblyKey).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="ChangeDbAndExecuteStatement(tSQLt.Build).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="EnableExternalAccess.sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="CreateBuildDb.sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="Drop(master.tSQLt_testutil).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="Install(master.tSQLt_testutil).sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="GetTestResults.sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="GetFailedTestCount.sql" todir="temp/tSQLtBuild/Tests"/>
  <copy file="../Examples/TestThatExamplesAreDeployed.sql" todir="temp/tSQLtBuild/Tests"/>
 </target>

 <target name="package.test.create.artifacts">
  <zip zipfile="output/tSQLtBuild/tSQLt.tests.zip">
   <fileset dir="temp/tSQLtBuild/Tests">
    <include name="TestUtil.sql"/>
    <include name="TestUtilTests.sql"/>
    <include name="AllTests.sql"/>
    <include name="AllTests.EXTERNAL_ACCESS.sql"/>
    <include name="AllTests.EXTERNAL_ACCESS_KEY_EXISTS.sql"/>
    <include name="AllTests.SA.sql"/>
    <include name="BootStrapTest.sql"/>
    <include name="ExecuteAs(tSQLt.Build).sql"/>
    <include name="ExecuteAs(tSQLt.Build.SA).sql"/>
    <include name="Drop(tSQLtAssemblyKey)(Pre2017).sql"/>
    <include name="Install(tSQLtAssemblyKey).sql"/>
    <include name="EnableExternalAccess.sql"/>
    <include name="Drop(master.tSQLt_testutil).sql"/>
    <include name="Install(master.tSQLt_testutil).sql"/>
    <include name="ChangeDbAndExecuteStatement(tSQLt.Build).sql"/>
    <include name="CreateBuildDb.sql"/>
    <include name="GetTestResults.sql"/>
    <include name="GetFailedTestCount.sql"/>
    <include name="TestThatExamplesAreDeployed.sql"/>
   </fileset>
   <fileset dir="temp/tSQLtBuild">
    <include name="ResetValidationServer.sql"/>
   </fileset>
  </zip>
 </target>

 <!--=======================================================================-->
 <!--========                 Build SQLPromptSnippets              =========-->
 <!--=======================================================================-->

 <target name="init.SQLPromptSnippets" description="prepare directories for SQLPromptSnippets build">
  <mkdir dir="temp/tSQLtBuild/SQLPromptSnippets/"/>
 </target>

 <target name="package.SQLPromptSnippets.copy">
  <copy todir="temp/tSQLtBuild/SQLPromptSnippets">
   <fileset dir="../Snippets">
    <include name="*.sqlpromptsnippet" />
    <include name="ReadMe.txt" />
   </fileset>
  </copy>
 </target>

 <target name="package.SQLPromptSnippets.create.artifacts">
  <zip zipfile="output/tSQLtBuild/tSQLtSnippets(SQLPrompt).zip">
   <fileset dir="temp/tSQLtBuild/SQLPromptSnippets">
    <include name="*.*"/>
   </fileset>
  </zip>
 </target>


 <!--=======================================================================-->
 <!--========                 Build Facade Objects                 =========-->
 <!--=======================================================================-->

 <target name="package.create.tSQLtFacade">
  <exec dir="." executable="powershell" timeout="5000" failonerror="true">
      <arg line="-ExecutionPolicy bypass" />
      <arg line="-File FacadeBuildScript.ps1" />
  </exec>
 </target>
</project>

